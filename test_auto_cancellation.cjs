/**
 * Script de test pour l'annulation automatique des r√©servations en cash
 * Ce script simule l'appel √† la fonction Edge Function d'annulation automatique
 */

const SUPABASE_URL = 'https://nnkywmfxoohehtyyzzgp.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ua3l3bWZ4b29oZWh0eXl6emdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNDQ3NTcsImV4cCI6MjA2OTcyMDc1N30.VZtsHLfbVks1uLhfnjW6uJSP0-J-Z30-WWT5D_B8Jpk';

async function testAutoCancellation() {
  console.log('üß™ [TEST] Test de l\'annulation automatique des r√©servations en cash...');
  
  try {
    // Appeler la fonction Edge Function d'annulation automatique
    const response = await fetch(`${SUPABASE_URL}/functions/v1/auto-cancel-cash-reservations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [TEST] Erreur HTTP:', response.status, errorText);
      return;
    }

    const result = await response.json();
    console.log('‚úÖ [TEST] R√©sultat de l\'annulation automatique:', result);
    
    if (result.success) {
      console.log(`üìä [TEST] ${result.cancelledCount} r√©servations annul√©es`);
      console.log(`‚ùå [TEST] ${result.errorCount} erreurs`);
      
      if (result.cancelledReservations && result.cancelledReservations.length > 0) {
        console.log('üìã [TEST] R√©servations annul√©es:');
        result.cancelledReservations.forEach((reservation, index) => {
          console.log(`  ${index + 1}. ${reservation.transaction_id} - ${reservation.full_name} (${reservation.email})`);
        });
      }
      
      if (result.errors && result.errors.length > 0) {
        console.log('‚ö†Ô∏è [TEST] Erreurs rencontr√©es:');
        result.errors.forEach((error, index) => {
          console.log(`  ${index + 1}. R√©servation ${error.reservation_id}: ${error.error}`);
        });
      }
    } else {
      console.error('‚ùå [TEST] √âchec de l\'annulation automatique:', result.error);
    }
    
  } catch (error) {
    console.error('‚ùå [TEST] Erreur lors du test:', error);
  }
}

// Fonction pour cr√©er une r√©servation de test en cash (pour tester le syst√®me)
async function createTestCashReservation() {
  console.log('üß™ [TEST] Cr√©ation d\'une r√©servation de test en cash...');
  
  try {
    // Cr√©er une r√©servation avec une date de cr√©ation de 6 jours en arri√®re (pour d√©clencher l'annulation)
    const sixDaysAgo = new Date();
    sixDaysAgo.setDate(sixDaysAgo.getDate() - 6);
    
    const testReservation = {
      full_name: 'Client Test Auto-Cancel',
      email: 'test.autocancel@example.com',
      phone: '+243000000000',
      company: 'Entreprise Test',
      activity: 'Test automatique',
      address: 'Adresse de test',
      space_type: 'coworking',
      start_date: '2025-02-01',
      end_date: '2025-02-28',
      occupants: 1,
      subscription_type: 'monthly',
      amount: 150,
      payment_method: 'cash',
      transaction_id: `TEST_AUTO_${Date.now()}`,
      status: 'pending',
      created_at: sixDaysAgo.toISOString(),
      updated_at: sixDaysAgo.toISOString()
    };
    
    console.log('üìù [TEST] R√©servation de test cr√©√©e:', testReservation);
    console.log('üìÖ [TEST] Date de cr√©ation (6 jours en arri√®re):', sixDaysAgo.toISOString());
    console.log('üí° [TEST] Cette r√©servation devrait √™tre annul√©e automatiquement lors du prochain test');
    
    return testReservation;
    
  } catch (error) {
    console.error('‚ùå [TEST] Erreur lors de la cr√©ation de la r√©servation de test:', error);
    return null;
  }
}

// Fonction pour v√©rifier les r√©servations en cash en attente
async function checkPendingCashReservations() {
  console.log('üîç [TEST] V√©rification des r√©servations en cash en attente...');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/reservations?select=*&payment_method=eq.cash&status=eq.pending&order=created_at.desc`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [TEST] Erreur lors de la v√©rification:', response.status, errorText);
      return;
    }

    const reservations = await response.json();
    console.log(`üìä [TEST] ${reservations.length} r√©servations en cash en attente trouv√©es`);
    
    if (reservations.length > 0) {
      console.log('üìã [TEST] D√©tails des r√©servations en attente:');
      reservations.forEach((reservation, index) => {
        const createdDate = new Date(reservation.created_at);
        const daysSinceCreation = Math.floor((Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24));
        
        console.log(`  ${index + 1}. ${reservation.transaction_id} - ${reservation.full_name}`);
        console.log(`     Email: ${reservation.email}`);
        console.log(`     Cr√©√©e: ${createdDate.toLocaleDateString('fr-FR')} (il y a ${daysSinceCreation} jours)`);
        console.log(`     Montant: $${reservation.amount}`);
        console.log(`     Espace: ${reservation.space_type}`);
        console.log(`     Statut: ${reservation.status}`);
        console.log('');
      });
      
      // Identifier les r√©servations qui devraient √™tre annul√©es (plus de 5 jours)
      const shouldBeCancelled = reservations.filter(r => {
        const createdDate = new Date(r.created_at);
        const daysSinceCreation = Math.floor((Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24));
        return daysSinceCreation > 5;
      });
      
      if (shouldBeCancelled.length > 0) {
        console.log(`‚ö†Ô∏è [TEST] ${shouldBeCancelled.length} r√©servations devraient √™tre annul√©es automatiquement (plus de 5 jours):`);
        shouldBeCancelled.forEach((reservation, index) => {
          const createdDate = new Date(reservation.created_at);
          const daysSinceCreation = Math.floor((Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24));
          console.log(`  ${index + 1}. ${reservation.transaction_id} - ${reservation.full_name} (${daysSinceCreation} jours)`);
        });
      } else {
        console.log('‚úÖ [TEST] Toutes les r√©servations en attente sont r√©centes (< 5 jours)');
      }
    }
    
  } catch (error) {
    console.error('‚ùå [TEST] Erreur lors de la v√©rification des r√©servations:', error);
  }
}

// Fonction principale de test
async function runTests() {
  console.log('üöÄ [TEST] D√©marrage des tests d\'annulation automatique...\n');
  
  // Test 1: V√©rifier les r√©servations en attente
  await checkPendingCashReservations();
  console.log('\n' + '='.repeat(60) + '\n');
  
  // Test 2: Cr√©er une r√©servation de test (optionnel)
  // await createTestCashReservation();
  // console.log('\n' + '='.repeat(60) + '\n');
  
  // Test 3: Ex√©cuter l'annulation automatique
  await testAutoCancellation();
  console.log('\n' + '='.repeat(60) + '\n');
  
  // Test 4: V√©rifier √† nouveau les r√©servations apr√®s annulation
  console.log('üîÑ [TEST] V√©rification apr√®s annulation automatique...');
  await checkPendingCashReservations();
  
  console.log('\n‚úÖ [TEST] Tests termin√©s !');
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testAutoCancellation,
  createTestCashReservation,
  checkPendingCashReservations,
  runTests
};
