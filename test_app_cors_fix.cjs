#!/usr/bin/env node

/**
 * Test de la correction CORS dans l'application
 * 
 * Ce script simule exactement ce que fait l'application web
 * pour v√©rifier que la correction CORS fonctionne.
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (identique √† l'application)
const supabaseUrl = 'https://nnkywmfxoohehtyyzzgp.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ua3l3bWZ4b29oZWh0eXl6emdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNDQ3NTcsImV4cCI6MjA2OTcyMDc1N30.VZtsHLfbVks1uLhfnjW6uJSP0-J-Z30-WWT5D_B8Jpk';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Simuler la fonction sendClientConfirmationEmail de l'application
async function sendClientConfirmationEmail(reservation) {
  console.log('üìß [APP] Envoi confirmation client:', reservation.email);

  try {
    // Approche alternative pour contourner le probl√®me CORS (comme dans l'app)
    const response = await fetch('https://nnkywmfxoohehtyyzzgp.supabase.co/functions/v1/send-confirmation-email', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseAnonKey}`,
        'apikey': supabaseAnonKey
      },
      body: JSON.stringify({
        to: reservation.email,
        subject: `R√©servation confirm√©e - ${reservation.transaction_id}`,
        html: `
          <h1>R√©servation confirm√©e</h1>
          <p>Bonjour ${reservation.full_name},</p>
          <p>Votre r√©servation a √©t√© confirm√©e avec succ√®s.</p>
          <p><strong>R√©f√©rence:</strong> ${reservation.transaction_id}</p>
          <p><strong>Espace:</strong> ${reservation.space_type}</p>
          <p><strong>Dates:</strong> ${reservation.start_date} √† ${reservation.end_date}</p>
          <p><strong>Montant:</strong> ${reservation.amount} FC</p>
          <p>Merci de votre confiance !</p>
        `,
        reservationData: reservation
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [APP] Erreur HTTP:', response.status, errorText);
      throw new Error(`Erreur HTTP ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ [APP] Email client envoy√©:', data);
    return data;
    
  } catch (error) {
    console.error('‚ùå [APP] Erreur email client:', error);
    
    // Fallback: simulation d'envoi d'email
    console.log('üìß [APP] Mode simulation - Email non envoy√© mais r√©servation cr√©√©e');
    console.log('üìß [APP] Email qui aurait √©t√© envoy√© √†:', reservation.email);
    console.log('üìß [APP] Sujet: R√©servation confirm√©e -', reservation.transaction_id);
    
    return { success: false, error: error.message };
  }
}

// Simuler une r√©servation compl√®te
async function testCompleteReservation() {
  console.log('üîß TEST APPLICATION AVEC CORRECTION CORS');
  console.log('==========================================');
  console.log('');
  
  // Donn√©es de test (similaires √† celles de l'application)
  const testReservation = {
    id: 'test_' + Date.now(),
    full_name: 'Test Utilisateur',
    email: 'trickson.mabengi@gmail.com',
    phone: '+243123456789',
    company: 'Test Company',
    activity: 'D√©veloppement web',
    space_type: 'coworking',
    start_date: '2024-01-15',
    end_date: '2024-01-20',
    amount: 50000,
    transaction_id: 'TEST_' + Date.now(),
    payment_method: 'cash'
  };

  console.log('üìù [APP] Donn√©es de test:', testReservation);
  console.log('');

  try {
    console.log('üìß [APP] Test envoi email client...');
    const result = await sendClientConfirmationEmail(testReservation);
    
    console.log('');
    if (result && result.success) {
      console.log('üéâ SUCC√àS !');
      console.log('La correction CORS fonctionne dans l\'application !');
      console.log(`üìß Provider utilis√©: ${result.provider || 'unknown'}`);
      console.log(`üìß Email envoy√©: ${result.emailSent || false}`);
    } else {
      console.log('‚ö†Ô∏è R√âSULTAT MIXTE');
      console.log('L\'email n\'a pas √©t√© envoy√© mais la r√©servation peut √™tre cr√©√©e');
      console.log('Mode simulation activ√©');
    }
    
  } catch (error) {
    console.log('‚ùå √âCHEC');
    console.log('Erreur lors du test:', error.message);
  }
}

async function runTest() {
  console.log('üöÄ D√©marrage du test application avec correction CORS...\n');
  
  await testCompleteReservation();
  
  console.log('');
  console.log('üìã R√©sum√©:');
  console.log('‚úÖ Si vous voyez "SUCC√àS", l\'application fonctionne');
  console.log('‚ö†Ô∏è Si vous voyez "R√âSULTAT MIXTE", l\'email est en mode simulation');
  console.log('‚ùå Si vous voyez "√âCHEC", il y a encore un probl√®me');
  console.log('');
  console.log('üéØ Prochaine √©tape: Testez l\'application web directement !');
}

runTest().catch(console.error);
