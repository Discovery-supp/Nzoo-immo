#!/usr/bin/env node

/**
 * Script de diagnostic pour identifier le probl√®me avec l'affichage des r√©servations
 * Usage: node scripts/diagnostic-reservations.cjs
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase avec valeurs par d√©faut
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://nnkywmfxoohehtyyzzgp.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ua3l3bWZ4b29oZWh0eXl6emdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNDQ3NTcsImV4cCI6MjA2OTcyMDc1N30.VZtsHLfbVks1uLhfnjW6uJSP0-J-Z30-WWT5D_B8Jpk';

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosticReservations() {
  console.log('üîç Diagnostic du syst√®me de r√©servations - Nzoo Immo\n');
  
  // Test 1: V√©rifier la connexion Supabase
  console.log('1Ô∏è‚É£ Test de connexion Supabase...');
  try {
    const { data: testConnection, error: connectionError } = await supabase
      .from('reservations')
      .select('count')
      .limit(1);
    
    if (connectionError) {
      console.log('‚ùå Erreur de connexion Supabase:', connectionError.message);
      return;
    }
    console.log('‚úÖ Connexion Supabase r√©ussie');
  } catch (err) {
    console.log('‚ùå Erreur de connexion:', err.message);
    return;
  }
  
  // Test 2: V√©rifier l'existence de la table reservations
  console.log('\n2Ô∏è‚É£ Test de la table reservations...');
  try {
    const { data, error } = await supabase
      .from('reservations')
      .select('*')
      .limit(5);
    
    if (error) {
      console.log('‚ùå Erreur lors de la lecture de la table reservations:', error.message);
      return;
    }
    
    console.log('‚úÖ Table reservations accessible');
    console.log(`üìä Nombre de r√©servations trouv√©es: ${data.length}`);
    
    if (data.length > 0) {
      console.log('üìã Exemple de r√©servation:');
      console.log(JSON.stringify(data[0], null, 2));
    }
  } catch (err) {
    console.log('‚ùå Erreur lors de la lecture des r√©servations:', err.message);
    return;
  }
  
  // Test 3: V√©rifier la structure de la table
  console.log('\n3Ô∏è‚É£ Test de la structure de la table...');
  try {
    const { data, error } = await supabase
      .from('reservations')
      .select('id, full_name, email, space_type, start_date, end_date, status, created_at')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erreur lors de la v√©rification de la structure:', error.message);
      return;
    }
    
    if (data.length > 0) {
      console.log('‚úÖ Structure de la table correcte');
      console.log('üìã Colonnes disponibles:', Object.keys(data[0]));
    } else {
      console.log('‚ö†Ô∏è Table vide - aucune r√©servation trouv√©e');
    }
  } catch (err) {
    console.log('‚ùå Erreur lors de la v√©rification de la structure:', err.message);
    return;
  }
  
  // Test 4: V√©rifier les politiques RLS
  console.log('\n4Ô∏è‚É£ Test des politiques RLS...');
  try {
    // Test avec un email sp√©cifique
    const testEmail = 'test@example.com';
    const { data, error } = await supabase
      .from('reservations')
      .select('*')
      .eq('email', testEmail);
    
    if (error) {
      console.log('‚ùå Erreur lors du test RLS:', error.message);
    } else {
      console.log('‚úÖ Politiques RLS fonctionnelles');
      console.log(`üìä R√©servations pour ${testEmail}: ${data.length}`);
    }
  } catch (err) {
    console.log('‚ùå Erreur lors du test RLS:', err.message);
  }
  
  // Test 5: V√©rifier les r√©servations r√©centes
  console.log('\n5Ô∏è‚É£ Test des r√©servations r√©centes...');
  try {
    const { data, error } = await supabase
      .from('reservations')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des r√©servations r√©centes:', error.message);
      return;
    }
    
    console.log(`‚úÖ ${data.length} r√©servations r√©centes trouv√©es`);
    
    if (data.length > 0) {
      console.log('üìã R√©servations r√©centes:');
      data.forEach((reservation, index) => {
        console.log(`${index + 1}. ${reservation.full_name} (${reservation.email}) - ${reservation.space_type} - ${reservation.status}`);
      });
    }
  } catch (err) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des r√©servations r√©centes:', err.message);
  }
  
  // Test 6: V√©rifier les statistiques
  console.log('\n6Ô∏è‚É£ Test des statistiques...');
  try {
    const { data, error } = await supabase
      .from('reservations')
      .select('status');
    
    if (error) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error.message);
      return;
    }
    
    const stats = data.reduce((acc, reservation) => {
      acc[reservation.status] = (acc[reservation.status] || 0) + 1;
      return acc;
    }, {});
    
    console.log('‚úÖ Statistiques des r√©servations:');
    console.log(JSON.stringify(stats, null, 2));
  } catch (err) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', err.message);
  }
  
  console.log('\nüéØ Diagnostic termin√© !');
  console.log('\nüí° Solutions possibles:');
  console.log('1. V√©rifiez que la table reservations existe dans Supabase');
  console.log('2. V√©rifiez les politiques RLS (Row Level Security)');
  console.log('3. V√©rifiez que les donn√©es sont bien ins√©r√©es');
  console.log('4. V√©rifiez la configuration Supabase dans l\'application');
}

// Ex√©cuter le diagnostic
diagnosticReservations().catch(console.error);
