// Script de test pour v√©rifier les r√©servations dans la base de donn√©es

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (remplacez par vos vraies cl√©s)
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'your-supabase-url';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-supabase-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testReservations() {
  console.log('üîç Test des r√©servations dans la base de donn√©es...\n');

  try {
    // Test de connexion
    console.log('üì° Test de connexion √† Supabase...');
    const { data: testConnection, error: connectionError } = await supabase
      .from('reservations')
      .select('count')
      .limit(1);
    
    if (connectionError) {
      console.error('‚ùå Erreur de connexion:', connectionError.message);
      return;
    }
    
    console.log('‚úÖ Connexion r√©ussie\n');

    // R√©cup√©rer toutes les r√©servations
    console.log('üìã R√©cup√©ration de toutes les r√©servations...');
    const { data: allReservations, error: fetchError } = await supabase
      .from('reservations')
      .select('*')
      .order('created_at', { ascending: false });

    if (fetchError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', fetchError.message);
      return;
    }

    console.log(`‚úÖ ${allReservations?.length || 0} r√©servations trouv√©es\n`);

    if (!allReservations || allReservations.length === 0) {
      console.log('‚ÑπÔ∏è Aucune r√©servation dans la base de donn√©es');
      return;
    }

    // Afficher les d√©tails des r√©servations
    console.log('üìä D√©tails des r√©servations:');
    allReservations.forEach((reservation, index) => {
      console.log(`\n${index + 1}. R√©servation ID: ${reservation.id}`);
      console.log(`   Nom: ${reservation.full_name || reservation.fullname || 'N/A'}`);
      console.log(`   Email: ${reservation.email || 'N/A'}`);
      console.log(`   Statut: ${reservation.status || 'N/A'}`);
      console.log(`   Espace: ${reservation.space_type || reservation.spacetype || 'N/A'}`);
      console.log(`   Date d√©but: ${reservation.start_date || reservation.startdate || 'N/A'}`);
      console.log(`   Date fin: ${reservation.end_date || reservation.enddate || 'N/A'}`);
      console.log(`   Montant: ${reservation.amount || 'N/A'}`);
      console.log(`   Cr√©√©e le: ${reservation.created_at || reservation.createdat || 'N/A'}`);
    });

    // Statistiques par statut
    console.log('\nüìà Statistiques par statut:');
    const statusStats = {};
    allReservations.forEach(reservation => {
      const status = reservation.status || 'unknown';
      statusStats[status] = (statusStats[status] || 0) + 1;
    });

    Object.entries(statusStats).forEach(([status, count]) => {
      console.log(`   ${status}: ${count} r√©servation(s)`);
    });

    // Test de filtrage par email (simulation client)
    console.log('\nüîç Test de filtrage par email (simulation client)...');
    const testEmail = allReservations[0]?.email;
    if (testEmail) {
      const { data: clientReservations, error: clientError } = await supabase
        .from('reservations')
        .select('*')
        .eq('email', testEmail);

      if (clientError) {
        console.error('‚ùå Erreur lors du filtrage client:', clientError.message);
      } else {
        console.log(`‚úÖ ${clientReservations?.length || 0} r√©servation(s) trouv√©e(s) pour l'email: ${testEmail}`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cuter le test
testReservations().catch(console.error);
