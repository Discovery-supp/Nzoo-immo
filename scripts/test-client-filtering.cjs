#!/usr/bin/env node

/**
 * Script pour tester le filtrage des r√©servations par client
 * Usage: node scripts/test-client-filtering.cjs
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testClientFiltering() {
  console.log('üß™ Test du filtrage des r√©servations par client\n');

  try {
    // Test 1: V√©rifier la connexion
    console.log('üì° Test 1: V√©rification de la connexion...');
    const { data: testData, error: testError } = await supabase.from('reservations').select('count').limit(1);
    
    if (testError) {
      console.error('‚ùå Erreur de connexion:', testError.message);
      return;
    }
    console.log('‚úÖ Connexion r√©ussie\n');

    // Test 2: R√©cup√©rer toutes les r√©servations
    console.log('üìã Test 2: R√©cup√©ration de toutes les r√©servations...');
    const { data: allReservations, error: allError } = await supabase
      .from('reservations')
      .select('*')
      .order('created_at', { ascending: false });

    if (allError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', allError.message);
      return;
    }

    console.log(`‚úÖ ${allReservations.length} r√©servations trouv√©es au total\n`);

    // Test 3: Analyser les emails uniques
    console.log('üîç Test 3: Analyse des emails uniques...');
    const uniqueEmails = [...new Set(allReservations.map(r => r.email))];
    console.log(`üìß ${uniqueEmails.length} emails uniques trouv√©s:`);
    
    uniqueEmails.forEach((email, index) => {
      const count = allReservations.filter(r => r.email === email).length;
      console.log(`  ${index + 1}. ${email} (${count} r√©servation${count > 1 ? 's' : ''})`);
    });
    console.log();

    // Test 4: Tester le filtrage par email
    console.log('üîí Test 4: Test du filtrage par email...');
    
    if (uniqueEmails.length > 0) {
      const testEmail = uniqueEmails[0];
      console.log(`üìß Test avec l'email: ${testEmail}`);
      
      const { data: filteredReservations, error: filterError } = await supabase
        .from('reservations')
        .select('*')
        .eq('email', testEmail)
        .order('created_at', { ascending: false });

      if (filterError) {
        console.error('‚ùå Erreur lors du filtrage:', filterError.message);
        return;
      }

      console.log(`‚úÖ ${filteredReservations.length} r√©servations trouv√©es pour ${testEmail}`);
      
      // V√©rifier que toutes les r√©servations appartiennent bien √† cet email
      const wrongEmails = filteredReservations.filter(r => r.email !== testEmail);
      if (wrongEmails.length > 0) {
        console.error('‚ùå ERREUR: Des r√©servations avec un mauvais email ont √©t√© trouv√©es:', wrongEmails);
      } else {
        console.log('‚úÖ Filtrage correct: toutes les r√©servations appartiennent √† l\'email test√©');
      }
    }
    console.log();

    // Test 5: Tester avec un email inexistant
    console.log('üîç Test 5: Test avec un email inexistant...');
    const fakeEmail = 'test-inexistant@example.com';
    
    const { data: fakeReservations, error: fakeError } = await supabase
      .from('reservations')
      .select('*')
      .eq('email', fakeEmail);

    if (fakeError) {
      console.error('‚ùå Erreur lors du test email inexistant:', fakeError.message);
      return;
    }

    console.log(`‚úÖ ${fakeReservations.length} r√©servations trouv√©es pour l'email inexistant (correct)`);
    console.log();

    // Test 6: V√©rifier les permissions RLS
    console.log('üîê Test 6: V√©rification des permissions RLS...');
    
    // Simuler un utilisateur client
    const clientEmail = uniqueEmails[0];
    if (clientEmail) {
      console.log(`üë§ Simulation d'un client avec l'email: ${clientEmail}`);
      
      // Test sans authentification (comme un client non connect√©)
      const { data: publicReservations, error: publicError } = await supabase
        .from('reservations')
        .select('*')
        .eq('email', clientEmail);

      if (publicError) {
        console.log('‚ö†Ô∏è Erreur attendue (RLS actif):', publicError.message);
      } else {
        console.log(`üìã ${publicReservations.length} r√©servations accessibles publiquement`);
      }
    }
    console.log();

    // R√©sum√©
    console.log('üìä R√©sum√© des tests:');
    console.log(`  üìß Emails uniques: ${uniqueEmails.length}`);
    console.log(`  üìã R√©servations totales: ${allReservations.length}`);
    console.log(`  üîí Filtrage par email: ${uniqueEmails.length > 0 ? 'Test√©' : 'Non test√©'}`);
    console.log(`  üîê Permissions RLS: ${uniqueEmails.length > 0 ? 'V√©rifi√©es' : 'Non v√©rifi√©es'}`);

    console.log('\nüí° Recommandations:');
    console.log('  1. V√©rifiez que les clients ne voient que leurs propres r√©servations');
    console.log('  2. Assurez-vous que les permissions RLS sont correctement configur√©es');
    console.log('  3. Testez avec diff√©rents comptes clients');
    console.log('  4. V√©rifiez les messages d\'erreur pour les clients sans r√©servations');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cuter le test
testClientFiltering();
