#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la persistance des donn√©es
 * Teste la sauvegarde en localStorage et en base de donn√©es
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (√† adapter selon votre configuration)
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

// Donn√©es de test
const testData = {
  'test-space': {
    title: 'Espace de Test',
    description: 'Espace de test pour v√©rifier la persistance',
    features: ['Wi-Fi', 'Bureau', 'Chaise'],
    dailyPrice: 30,
    monthlyPrice: 600,
    yearlyPrice: 6000,
    hourlyPrice: 5,
    maxOccupants: 5,
    imageUrl: '/images/spaces/test.jpg',
    lastModified: new Date().toISOString()
  }
};

async function testLocalStorage() {
  console.log('üß™ Test du localStorage...');
  
  try {
    // Simuler localStorage
    const localStorage = {};
    
    // Test de sauvegarde
    localStorage.setItem('nzoo_spaces_content', JSON.stringify(testData));
    console.log('‚úÖ Sauvegarde localStorage r√©ussie');
    
    // Test de chargement
    const loadedData = JSON.parse(localStorage.getItem('nzoo_spaces_content'));
    console.log('‚úÖ Chargement localStorage r√©ussi');
    
    // V√©rification
    if (loadedData['test-space'].title === testData['test-space'].title) {
      console.log('‚úÖ Donn√©es localStorage coh√©rentes');
    } else {
      console.log('‚ùå Donn√©es localStorage incoh√©rentes');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur localStorage:', error);
    return false;
  }
}

async function testDatabase() {
  console.log('üß™ Test de la base de donn√©es...');
  
  try {
    // Test de connexion
    const { data: connectionTest, error: connectionError } = await supabase
      .from('spaces_content')
      .select('count')
      .limit(1);
    
    if (connectionError) {
      console.log('‚ö†Ô∏è Table spaces_content non accessible:', connectionError.message);
      return false;
    }
    
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');
    
    // Test d'insertion
    const { data: insertData, error: insertError } = await supabase
      .from('spaces_content')
      .insert({
        space_key: 'test-space-db',
        language: 'fr',
        title: testData['test-space'].title,
        description: testData['test-space'].description,
        features: testData['test-space'].features,
        daily_price: testData['test-space'].dailyPrice,
        monthly_price: testData['test-space'].monthlyPrice,
        yearly_price: testData['test-space'].yearlyPrice,
        hourly_price: testData['test-space'].hourlyPrice,
        max_occupants: testData['test-space'].maxOccupants,
        image_url: testData['test-space'].imageUrl,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (insertError) {
      console.error('‚ùå Erreur d\'insertion:', insertError);
      return false;
    }
    
    console.log('‚úÖ Insertion en base de donn√©es r√©ussie');
    
    // Test de lecture
    const { data: readData, error: readError } = await supabase
      .from('spaces_content')
      .select('*')
      .eq('space_key', 'test-space-db')
      .eq('language', 'fr')
      .single();
    
    if (readError) {
      console.error('‚ùå Erreur de lecture:', readError);
      return false;
    }
    
    console.log('‚úÖ Lecture depuis la base de donn√©es r√©ussie');
    
    // Test de mise √† jour
    const { data: updateData, error: updateError } = await supabase
      .from('spaces_content')
      .update({
        title: 'Espace de Test Modifi√©',
        updated_at: new Date().toISOString()
      })
      .eq('space_key', 'test-space-db')
      .eq('language', 'fr')
      .select()
      .single();
    
    if (updateError) {
      console.error('‚ùå Erreur de mise √† jour:', updateError);
      return false;
    }
    
    console.log('‚úÖ Mise √† jour en base de donn√©es r√©ussie');
    
    // Nettoyage
    const { error: deleteError } = await supabase
      .from('spaces_content')
      .delete()
      .eq('space_key', 'test-space-db');
    
    if (deleteError) {
      console.warn('‚ö†Ô∏è Erreur lors du nettoyage:', deleteError);
    } else {
      console.log('‚úÖ Nettoyage de la base de donn√©es r√©ussi');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur base de donn√©es:', error);
    return false;
  }
}

async function testPersistence() {
  console.log('üöÄ Test de persistance des donn√©es...\n');
  
  const localStorageResult = await testLocalStorage();
  console.log('');
  
  const databaseResult = await testDatabase();
  console.log('');
  
  if (localStorageResult && databaseResult) {
    console.log('üéâ Tous les tests de persistance sont r√©ussis !');
    console.log('‚úÖ Votre application garantit la sauvegarde permanente des donn√©es');
  } else if (localStorageResult) {
    console.log('‚ö†Ô∏è Persistance partielle : localStorage fonctionne, base de donn√©es non disponible');
    console.log('‚úÖ Les donn√©es sont sauvegard√©es localement');
  } else {
    console.log('‚ùå Probl√®me de persistance d√©tect√©');
    console.log('üîß V√©rifiez la configuration de votre application');
  }
}

// Ex√©cuter les tests
testPersistence().catch(console.error);
