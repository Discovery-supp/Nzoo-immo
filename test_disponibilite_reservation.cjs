console.log('üîç Test de disponibilit√© des bureaux priv√©s - Page R√©servation');
console.log('==========================================================\n');

// Simulation des donn√©es de test
const testScenarios = [
  {
    name: 'Bureaux priv√©s disponibles',
    spaceType: 'bureau-prive',
    reservations: [
      { status: 'confirmed', space_type: 'bureau-prive' },
      { status: 'pending', space_type: 'bureau-prive' }
    ],
    expected: { isAvailable: true, message: '2 places disponibles' }
  },
  {
    name: 'Bureaux priv√©s complets',
    spaceType: 'bureau-prive',
    reservations: [
      { status: 'confirmed', space_type: 'bureau-prive' },
      { status: 'confirmed', space_type: 'bureau-prive' },
      { status: 'confirmed', space_type: 'bureau-prive' }
    ],
    expected: { isAvailable: false, message: 'Tous les bureaux priv√©s sont actuellement occup√©s' }
  },
  {
    name: 'Bureaux priv√©s avec r√©servations annul√©es',
    spaceType: 'bureau-prive',
    reservations: [
      { status: 'confirmed', space_type: 'bureau-prive' },
      { status: 'cancelled', space_type: 'bureau-prive' },
      { status: 'cancelled', space_type: 'bureau-prive' }
    ],
    expected: { isAvailable: true, message: '2 places disponibles' }
  }
];

const maxCapacities = {
  'coworking': 4,
  'bureau-prive': 3,
  'domiciliation': 1
};

// Fonction de test de disponibilit√©
const testAvailability = (spaceType, reservations) => {
  const maxCapacity = maxCapacities[spaceType] || 4;
  const activeReservations = reservations.filter(r => 
    r.space_type === spaceType && 
    (r.status === 'confirmed' || r.status === 'pending')
  );
  
  const isAvailable = activeReservations.length < maxCapacity;
  const availableSlots = Math.max(0, maxCapacity - activeReservations.length);
  
  let message;
  if (isAvailable) {
    if (availableSlots === 1) {
      message = '1 place disponible';
    } else {
      message = `${availableSlots} places disponibles`;
    }
  } else {
    message = 'Tous les bureaux priv√©s sont actuellement occup√©s';
  }
  
  return { isAvailable, message, availableSlots, currentOccupancy: activeReservations.length };
};

// Test des sc√©narios
console.log('1Ô∏è‚É£ Test des sc√©narios de disponibilit√©...\n');

testScenarios.forEach((scenario, index) => {
  console.log(`üìä Sc√©nario ${index + 1}: ${scenario.name}`);
  console.log(`   Type d'espace: ${scenario.spaceType}`);
  console.log(`   R√©servations: ${scenario.reservations.length}`);
  
  const result = testAvailability(scenario.spaceType, scenario.reservations);
  
  console.log(`   R√©sultat attendu: ${scenario.expected.isAvailable ? 'DISPONIBLE' : 'COMPLET'}`);
  console.log(`   R√©sultat obtenu: ${result.isAvailable ? 'DISPONIBLE' : 'COMPLET'}`);
  console.log(`   Message: ${result.message}`);
  console.log(`   Places disponibles: ${result.availableSlots}/${maxCapacities[scenario.spaceType]}`);
  
  const testPassed = result.isAvailable === scenario.expected.isAvailable;
  console.log(`   Test: ${testPassed ? '‚úÖ PASS' : '‚ùå FAIL'}\n`);
});

// Test de la logique d'interface
console.log('2Ô∏è‚É£ Test de la logique d\'interface...\n');

const testInterfaceLogic = () => {
  const scenarios = [
    { spaceType: 'bureau-prive', isAvailable: false, expectedButtonText: 'Bureaux indisponibles' },
    { spaceType: 'bureau-prive', isAvailable: true, expectedButtonText: 'R√©server' },
    { spaceType: 'coworking', isAvailable: true, expectedButtonText: 'R√©server' }
  ];
  
  scenarios.forEach((scenario, index) => {
    const buttonText = !scenario.isAvailable && scenario.spaceType === 'bureau-prive' 
      ? 'Bureaux indisponibles' 
      : 'R√©server';
    
    const testPassed = buttonText === scenario.expectedButtonText;
    
    console.log(`üìä Test ${index + 1}: ${scenario.spaceType} - ${scenario.isAvailable ? 'Disponible' : 'Indisponible'}`);
    console.log(`   Texte du bouton attendu: "${scenario.expectedButtonText}"`);
    console.log(`   Texte du bouton obtenu: "${buttonText}"`);
    console.log(`   Test: ${testPassed ? '‚úÖ PASS' : '‚ùå FAIL'}\n`);
  });
};

testInterfaceLogic();

// Test de validation des √©tapes
console.log('3Ô∏è‚É£ Test de validation des √©tapes...\n');

const testStepValidation = () => {
  const testCases = [
    {
      step: 1,
      selectedDates: [new Date(), new Date()],
      spaceAvailable: true,
      expected: true,
      description: '√âtape 1 - Dates s√©lectionn√©es et espace disponible'
    },
    {
      step: 1,
      selectedDates: [new Date(), new Date()],
      spaceAvailable: false,
      expected: false,
      description: '√âtape 1 - Dates s√©lectionn√©es mais espace indisponible'
    },
    {
      step: 2,
      formData: { fullName: 'Test', email: 'test@test.com', phone: '123456789' },
      spaceAvailable: true,
      expected: true,
      description: '√âtape 2 - Formulaire complet et espace disponible'
    },
    {
      step: 2,
      formData: { fullName: 'Test', email: 'test@test.com', phone: '123456789' },
      spaceAvailable: false,
      expected: false,
      description: '√âtape 2 - Formulaire complet mais espace indisponible'
    }
  ];
  
  testCases.forEach((testCase, index) => {
    let isValid;
    
    if (testCase.step === 1) {
      isValid = testCase.selectedDates !== null && testCase.spaceAvailable;
    } else if (testCase.step === 2) {
      const hasRequiredFields = testCase.formData.fullName && testCase.formData.email && testCase.formData.phone;
      isValid = hasRequiredFields && testCase.spaceAvailable;
    }
    
    const testPassed = isValid === testCase.expected;
    
    console.log(`üìä Test ${index + 1}: ${testCase.description}`);
    console.log(`   Validation attendue: ${testCase.expected ? 'VALID' : 'INVALID'}`);
    console.log(`   Validation obtenue: ${isValid ? 'VALID' : 'INVALID'}`);
    console.log(`   Test: ${testPassed ? '‚úÖ PASS' : '‚ùå FAIL'}\n`);
  });
};

testStepValidation();

console.log('4Ô∏è‚É£ Instructions pour tester dans l\'application...\n');
console.log('üìã Pour tester la fonctionnalit√©:');
console.log('1. Allez sur la page de r√©servation');
console.log('2. S√©lectionnez "Bureau priv√©"');
console.log('3. V√©rifiez que:');
console.log('   - Une alerte rouge s\'affiche si les bureaux sont indisponibles');
console.log('   - Le bouton "Suivant" est d√©sactiv√©');
console.log('   - Le bouton de r√©servation affiche "Bureaux indisponibles"');
console.log('4. Pour rendre les bureaux disponibles:');
console.log('   - Allez dans Supabase Dashboard');
console.log('   - Table "reservations"');
console.log('   - Supprimez ou annulez les r√©servations de bureau-prive');
console.log('   - Actualisez la page');

console.log('\nüéØ Syst√®me de disponibilit√© pour la page de r√©servation pr√™t !');
console.log('   Les bureaux priv√©s seront automatiquement d√©sactiv√©s quand ils sont occup√©s.');
