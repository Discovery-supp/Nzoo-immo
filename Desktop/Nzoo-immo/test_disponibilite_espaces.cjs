console.log('üß™ Test de la gestion de disponibilit√© des espaces - Nzoo Immo');
console.log('================================================================\n');

// Simulation des donn√©es d'espaces avec disponibilit√©
const testSpaces = {
  coworking: {
    title: 'Espace de Coworking',
    description: 'Un espace de travail collaboratif moderne',
    features: ['Wi-Fi', 'Bureau', 'Chaise'],
    dailyPrice: 25,
    monthlyPrice: 450,
    yearlyPrice: 4800,
    hourlyPrice: 5,
    maxOccupants: 20,
    imageUrl: '/images/spaces/coworking.jpg',
    isAvailable: true
  },
  'bureau-prive': {
    title: 'Bureau Priv√©',
    description: 'Un bureau priv√© et confortable',
    features: ['Bureau priv√©', 'Wi-Fi d√©di√©'],
    dailyPrice: 50,
    monthlyPrice: 900,
    yearlyPrice: 9600,
    hourlyPrice: 10,
    maxOccupants: 4,
    imageUrl: '/images/spaces/bureau_prive.jpg',
    isAvailable: false // Test d'un espace indisponible
  },
  domiciliation: {
    title: 'Service de Domiciliation',
    description: 'Service complet de domiciliation',
    features: ['Adresse postale', 'R√©ception courrier'],
    dailyPrice: 0,
    monthlyPrice: 150,
    yearlyPrice: 1600,
    hourlyPrice: 0,
    maxOccupants: 1,
    imageUrl: '/images/spaces/domiciliation.jpg',
    isAvailable: true
  }
};

// Test 1: Filtrage des espaces disponibles
console.log('1Ô∏è‚É£ Test de filtrage des espaces disponibles...');
const availableSpaces = Object.entries(testSpaces)
  .filter(([key, space]) => space.isAvailable !== false)
  .map(([key, space]) => ({ key, title: space.title, isAvailable: space.isAvailable }));

console.log('Espaces disponibles:', availableSpaces);
console.log(`‚úÖ ${availableSpaces.length} espaces disponibles sur ${Object.keys(testSpaces).length} total\n`);

// Test 2: V√©rification de la logique de disponibilit√©
console.log('2Ô∏è‚É£ Test de la logique de disponibilit√©...');
const testCases = [
  { isAvailable: true, expected: true, description: 'Explicitement disponible' },
  { isAvailable: false, expected: false, description: 'Explicitement indisponible' },
  { isAvailable: undefined, expected: true, description: 'Non d√©fini (par d√©faut disponible)' },
  { isAvailable: null, expected: true, description: 'Null (par d√©faut disponible)' }
];

testCases.forEach((testCase, index) => {
  const result = testCase.isAvailable !== false;
  const status = result === testCase.expected ? '‚úÖ PASS' : '‚ùå FAIL';
  console.log(`   ${index + 1}. ${testCase.description}: ${status}`);
  console.log(`      isAvailable: ${testCase.isAvailable} ‚Üí R√©sultat: ${result} (attendu: ${testCase.expected})`);
});
console.log('');

// Test 3: Simulation de l'interface utilisateur
console.log('3Ô∏è‚É£ Simulation de l\'interface utilisateur...');
console.log('Dans l\'√©diteur de contenu:');
Object.entries(testSpaces).forEach(([key, space]) => {
  const status = space.isAvailable !== false ? 'üü¢ Disponible' : 'üî¥ Indisponible';
  console.log(`   - ${space.title}: ${status}`);
});

console.log('\nDans la page de r√©servation:');
const reservationSpaces = Object.entries(testSpaces)
  .filter(([key, space]) => space.isAvailable !== false)
  .map(([key, space]) => space.title);
console.log(`   Espaces affich√©s: ${reservationSpaces.join(', ')}`);
console.log('');

// Test 4: Validation des donn√©es
console.log('4Ô∏è‚É£ Validation des donn√©es...');
let validationPassed = true;

Object.entries(testSpaces).forEach(([key, space]) => {
  // V√©rifier que tous les champs requis sont pr√©sents
  const requiredFields = ['title', 'description', 'features', 'dailyPrice', 'monthlyPrice', 'yearlyPrice', 'hourlyPrice', 'maxOccupants'];
  const missingFields = requiredFields.filter(field => !(field in space));
  
  if (missingFields.length > 0) {
    console.log(`   ‚ùå ${space.title}: Champs manquants: ${missingFields.join(', ')}`);
    validationPassed = false;
  } else {
    console.log(`   ‚úÖ ${space.title}: Tous les champs requis pr√©sents`);
  }
  
  // V√©rifier que isAvailable est un bool√©en ou undefined
  if (space.isAvailable !== undefined && typeof space.isAvailable !== 'boolean') {
    console.log(`   ‚ùå ${space.title}: isAvailable doit √™tre un bool√©en ou undefined`);
    validationPassed = false;
  }
});

console.log(`\nValidation globale: ${validationPassed ? '‚úÖ PASS' : '‚ùå FAIL'}`);
console.log('');

// Test 5: Simulation de sauvegarde en base de donn√©es
console.log('5Ô∏è‚É£ Simulation de sauvegarde en base de donn√©es...');
const dbFormat = Object.entries(testSpaces).map(([key, space]) => ({
  space_key: key,
  language: 'fr',
  title: space.title,
  description: space.description,
  features: space.features,
  daily_price: space.dailyPrice,
  monthly_price: space.monthlyPrice,
  yearly_price: space.yearlyPrice,
  hourly_price: space.hourlyPrice,
  max_occupants: space.maxOccupants,
  image_url: space.imageUrl,
  is_available: space.isAvailable !== false
}));

console.log('Format base de donn√©es:');
dbFormat.forEach(space => {
  console.log(`   - ${space.space_key}: is_available = ${space.is_available}`);
});
console.log('');

// R√©sum√©
console.log('üéØ R√©sum√© du test:');
console.log(`   - Espaces test√©s: ${Object.keys(testSpaces).length}`);
console.log(`   - Espaces disponibles: ${availableSpaces.length}`);
console.log(`   - Espaces indisponibles: ${Object.keys(testSpaces).length - availableSpaces.length}`);
console.log(`   - Validation: ${validationPassed ? '‚úÖ R√©ussie' : '‚ùå √âchou√©e'}`);
console.log('');
console.log('üìã Instructions pour tester manuellement:');
console.log('   1. Aller sur Dashboard ‚Üí Espaces ‚Üí √âditer le contenu');
console.log('   2. Cliquer sur "Modifier" pour un espace');
console.log('   3. Basculer le switch de disponibilit√©');
console.log('   4. Sauvegarder les modifications');
console.log('   5. Aller sur la page R√©servations');
console.log('   6. V√©rifier que l\'espace indisponible n\'appara√Æt plus');
console.log('');
console.log('‚úÖ Test termin√© !');
