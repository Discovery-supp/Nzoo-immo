const { createClient } = require('@supabase/supabase-js');

console.log('üîç DIAGNOSTIC COMPLET DU SYST√àME D\'EMAILS');
console.log('==========================================\n');

// Configuration Supabase (utiliser les m√™mes valeurs que dans le code)
const supabaseUrl = 'https://nnkywmfxoohehtyyzzgp.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ua3l3bWZ4b29oZWh0eXl6emdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNDQ3NTcsImV4cCI6MjA2OTcyMDc1N30.VZtsHLfbVks1uLhfnjW6uJSP0-J-Z30-WWT5D_B8Jpk';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function diagnosticComplet() {
  console.log('üìã 1. TEST DE CONNEXION SUPABASE');
  console.log('--------------------------------');
  
  try {
    const { data, error } = await supabase
      .from('reservations')
      .select('count')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Connexion Supabase √©chou√©e:', error.message);
      return;
    }
    console.log('‚úÖ Connexion Supabase r√©ussie\n');
  } catch (err) {
    console.log('‚ùå Erreur de connexion:', err.message);
    return;
  }

  console.log('üìã 2. TEST DE LA FONCTION EDGE SUPABASE');
  console.log('----------------------------------------');
  
  try {
    const { data, error } = await supabase.functions.invoke('send-confirmation-email', {
      body: {
        to: 'test@example.com',
        subject: 'Test Email',
        html: '<p>Test email</p>',
        reservationData: {
          fullName: 'Test User',
          email: 'test@example.com',
          phone: '123456789',
          spaceType: 'coworking',
          startDate: '2024-01-20',
          endDate: '2024-01-21',
          amount: 100,
          transactionId: 'TEST_123',
          status: 'pending'
        }
      }
    });

    if (error) {
      console.log('‚ùå Fonction Edge √©chou√©e:', error.message);
      if (error.message.includes('404')) {
        console.log('üîß Solution: La fonction Edge n\'existe pas. V√©rifiez le d√©ploiement.');
      }
    } else {
      console.log('‚úÖ Fonction Edge r√©pond:', data);
      console.log('üìß Provider utilis√©:', data.provider);
      console.log('üìß Email envoy√©:', data.emailSent);
      if (data.error) {
        console.log('‚ùå Erreur email:', data.error);
      }
    }
  } catch (err) {
    console.log('‚ùå Erreur fonction Edge:', err.message);
  }

  console.log('\nüìã 3. TEST DE CR√âATION DE R√âSERVATION');
  console.log('--------------------------------------');
  
  try {
    const reservationData = {
      full_name: 'Test User',
      email: 'test@example.com',
      phone: '123456789',
      company: 'Test Company',
      activity: 'Test Activity',
      address: 'Test Address',
      space_type: 'coworking',
      start_date: '2024-01-20',
      end_date: '2024-01-21',
      occupants: 1,
      subscription_type: 'daily',
      amount: 100,
      payment_method: 'cash',
      transaction_id: `TEST_${Date.now()}`,
      status: 'pending',
      created_at: new Date().toISOString()
    };

    const { data: reservation, error } = await supabase
      .from('reservations')
      .insert(reservationData)
      .select()
      .single();

    if (error) {
      console.log('‚ùå Cr√©ation r√©servation √©chou√©e:', error.message);
    } else {
      console.log('‚úÖ R√©servation cr√©√©e:', reservation.id);
      
      // Test d'envoi d'email apr√®s r√©servation
      console.log('\nüìã 4. TEST D\'ENVOI D\'EMAIL APR√àS R√âSERVATION');
      console.log('------------------------------------------------');
      
      try {
        const emailResult = await supabase.functions.invoke('send-confirmation-email', {
          body: {
            to: 'test@example.com',
            subject: `Confirmation de r√©servation - Test User`,
            html: '<p>Test confirmation email</p>',
            reservationData: {
              fullName: 'Test User',
              email: 'test@example.com',
              phone: '123456789',
              company: 'Test Company',
              activity: 'Test Activity',
              spaceType: 'coworking',
              startDate: '2024-01-20',
              endDate: '2024-01-21',
              amount: 100,
              transactionId: reservation.transaction_id,
              status: reservation.status
            }
          }
        });

        if (emailResult.error) {
          console.log('‚ùå Email apr√®s r√©servation √©chou√©:', emailResult.error.message);
        } else {
          console.log('‚úÖ Email apr√®s r√©servation envoy√©:', emailResult.data);
        }
      } catch (emailErr) {
        console.log('‚ùå Erreur email apr√®s r√©servation:', emailErr.message);
      }
    }
  } catch (err) {
    console.log('‚ùå Erreur cr√©ation r√©servation:', err.message);
  }

  console.log('\nüìã 5. ANALYSE DU FLUX COMPLET');
  console.log('------------------------------');
  
  console.log('üîç Points de v√©rification:');
  console.log('1. ‚úÖ Connexion Supabase: OK');
  console.log('2. ‚ö†Ô∏è  Fonction Edge: √Ä v√©rifier (voir ci-dessus)');
  console.log('3. ‚úÖ Cr√©ation r√©servation: OK');
  console.log('4. ‚ö†Ô∏è  Envoi email: √Ä v√©rifier (voir ci-dessus)');
  
  console.log('\nüîß SOLUTIONS RECOMMAND√âES:');
  console.log('1. V√©rifiez que la fonction Edge est d√©ploy√©e sur Supabase');
  console.log('2. Configurez les variables d\'environnement dans Supabase:');
  console.log('   - SENDGRID_API_KEY');
  console.log('   - RESEND_API_KEY');
  console.log('   - FROM_EMAIL');
  console.log('3. V√©rifiez les logs de la fonction Edge dans Supabase Dashboard');
  console.log('4. Testez avec un email valide au lieu de test@example.com');
  
  console.log('\nüìß CONFIGURATION EMAIL RECOMMAND√âE:');
  console.log('- Utilisez SendGrid ou Resend comme provider principal');
  console.log('- Configurez FROM_EMAIL avec un domaine v√©rifi√©');
  console.log('- Testez avec des emails r√©els pour valider le flux');
}

diagnosticComplet().catch(console.error);
