import type { Command } from 'commander';
import type { ZodSchema } from 'zod';
import type { CliField } from '../types/index.js';
import { type OutputFormat } from './output.js';
export declare function validateOptions<T>(options: unknown, schema: ZodSchema<T>, format?: OutputFormat, fields?: Array<CliField>, command?: Command): T;
export declare function displayCLIResults(data: Record<string, unknown> | Array<Record<string, unknown>>, fields: Array<CliField>, format?: OutputFormat, title?: string, additionalInfo?: Record<string, string | undefined>, successMessage?: string): void;
export declare function displayCLIError(_data: Record<string, unknown>, _fields: Array<CliField>, format?: OutputFormat, title?: string, additionalInfo?: Record<string, string | undefined>, errorMessage?: string): void;
export declare function displayValidationErrors(errors: Array<{
    path: string | number;
    message: string;
}>, fields?: Array<CliField>, command?: Command): void;
export declare function validateEnvironmentVariable(varName: string, helpUrl?: string): string;
export declare function fieldToCommanderOption(field: CliField): {
    flags: string;
    description: string;
};
export declare function registerFieldOptions(command: Command, fields: Array<CliField>): void;
//# sourceMappingURL=cli.d.ts.map