export type OutputFormat = 'text' | 'json';
export interface JsonSuccessResponse<T = unknown> {
    success: true;
    data: T;
}
export interface JsonErrorResponse {
    success: false;
    error: string;
    code?: string;
    errors?: Array<{
        field: string;
        message: string;
    }>;
}
export type JsonResponse<T = unknown> = JsonSuccessResponse<T> | JsonErrorResponse;
export declare function outputSuccess<T>(data: T, format: OutputFormat, textCallback: () => void): void;
export declare function outputValidationErrors(errors: Array<{
    path: string | number;
    message: string;
}>, format: OutputFormat, textCallback: () => void): void;
export declare function outputError(message: string, format: OutputFormat, textCallback: () => void): void;
//# sourceMappingURL=output.d.ts.map