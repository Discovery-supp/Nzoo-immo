import type { ApiResult, CliField } from '../../types/index.js';
import { type SelectableItem } from './SelectableListDisplay.js';
interface UseInputSelectorProps<T extends SelectableItem, D = Record<string, unknown>> {
    title: string;
    loadFunction: (data: D, apiKey: string) => Promise<ApiResult<{
        data: Array<T>;
    }>>;
    formatData: (data: {
        data: Array<T>;
    }) => Array<Record<string, unknown>>;
    displayFields: Array<CliField>;
    loadData?: D;
    noDataMessage?: string;
    onSelect: (value: string) => void;
}
export declare function useInputSelector<T extends SelectableItem, D = Record<string, unknown>>({ title, loadFunction, formatData, displayFields, loadData, noDataMessage, onSelect, }: UseInputSelectorProps<T, D>): {
    isOpen: boolean;
    openSelector: () => void;
    closeSelector: () => void;
    selectorComponent: import("react/jsx-runtime").JSX.Element | null;
};
export {};
//# sourceMappingURL=useInputSelector.d.ts.map