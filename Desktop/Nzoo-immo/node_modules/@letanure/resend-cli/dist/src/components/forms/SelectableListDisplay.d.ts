import type { ApiResult, CliField } from '../../types/index.js';
export interface SelectableItem {
    id: string;
    [key: string]: unknown;
}
interface SelectableListDisplayProps<T extends SelectableItem, D = Record<string, unknown>> {
    title: string;
    isOpen: boolean;
    onSelect: (item: T) => void;
    onCancel: () => void;
    loadFunction: (data: D, apiKey: string) => Promise<ApiResult<{
        data: Array<T>;
    }>>;
    formatData: (data: {
        data: Array<T>;
    }) => Array<Record<string, unknown>>;
    displayFields: Array<CliField>;
    loadData?: D;
    noDataMessage?: string;
}
export declare function SelectableListDisplay<T extends SelectableItem, D = Record<string, unknown>>({ title, isOpen, onSelect, onCancel, loadFunction, formatData, displayFields, loadData, noDataMessage, }: SelectableListDisplayProps<T, D>): import("react/jsx-runtime").JSX.Element | null;
export {};
//# sourceMappingURL=SelectableListDisplay.d.ts.map