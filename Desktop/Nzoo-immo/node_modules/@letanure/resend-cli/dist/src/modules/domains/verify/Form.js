import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Alert, Spinner } from '@inkjs/ui';
import { Box, useInput } from 'ink';
import React from 'react';
import { SimpleForm } from '../../../components/forms/SimpleForm.js';
import { ErrorScreen } from '../../../components/ui/ErrorScreen.js';
import { Layout } from '../../../components/ui/layout.js';
import { SuccessScreen } from '../../../components/ui/SuccessScreen.js';
import { config } from '../../../config/config.js';
import { useDryRun } from '../../../contexts/DryRunProvider.js';
import { useResend } from '../../../contexts/ResendProvider.js';
import { useDomainSelector } from '../../../hooks/useDomainSelector.js';
import { verifyDomain } from './action.js';
import { verifyDomainFields } from './fields.js';
import { verifyDomainSchema } from './schema.js';
export const Form = ({ onExit }) => {
    const [result, setResult] = React.useState(null);
    const [loading, setLoading] = React.useState(false);
    const [successData, setSuccessData] = React.useState(null);
    const [isDryRunSuccess, setIsDryRunSuccess] = React.useState(false);
    const [selectedDomainId, setSelectedDomainId] = React.useState('');
    const { isDryRun } = useDryRun();
    const { apiKey } = useResend();
    const initialFormData = React.useMemo(() => {
        return selectedDomainId ? { domainId: selectedDomainId } : undefined;
    }, [selectedDomainId]);
    const domainSelector = useDomainSelector((domainId) => {
        setSelectedDomainId(domainId);
    });
    // Create form fields with domain selector
    const formFields = React.useMemo(() => {
        return verifyDomainFields.map((field) => {
            if (field.name === 'domainId') {
                return {
                    ...field,
                    type: 'input-with-selector',
                    onSelectorOpen: domainSelector.openSelector,
                };
            }
            return field;
        });
    }, [domainSelector.openSelector]);
    const handleSubmit = async (data) => {
        setLoading(true);
        if (isDryRun) {
            setSuccessData({
                'Domain ID': data.domainId,
                'API Key': apiKey ? `${apiKey.substring(0, 10)}...` : 'Not set',
                'Dry Run': 'true',
                Status: 'Validation successful! (Domain not verified due to dry-run mode)',
            });
            setIsDryRunSuccess(true);
        }
        else {
            const result = await verifyDomain(data, apiKey);
            if (result.success && result.data) {
                setSuccessData({
                    'Domain ID': result.data.id,
                    Object: result.data.object,
                });
                setIsDryRunSuccess(false);
            }
            else {
                setResult(result);
            }
        }
        setLoading(false);
    };
    useInput((input, key) => {
        if ((input === 'q' || key.escape) && !loading) {
            onExit();
        }
    });
    if (successData) {
        return (_jsx(SuccessScreen, { data: successData, successMessage: "Domain Verified Successfully", headerText: `${config.baseTitle} - Domains - Verify`, isDryRun: isDryRunSuccess, onExit: () => {
                setSuccessData(null);
                setIsDryRunSuccess(false);
                onExit();
            } }));
    }
    if (loading) {
        return (_jsx(Layout, { headerText: `${config.baseTitle} - Domains - Verify`, showNavigationInstructions: false, navigationContext: "none", children: _jsx(Box, { marginBottom: 1, children: _jsx(Spinner, { label: "Verifying domain..." }) }) }));
    }
    if (result) {
        return (_jsx(ErrorScreen, { title: "Domain Verification Failed", message: result.error || 'Failed to verify domain', suggestion: "Check the domain ID and ensure DNS records are properly configured.", headerText: `${config.baseTitle} - Domains - Verify`, onExit: () => {
                setResult(null);
                onExit();
            }, showRetry: true, onRetry: () => {
                setResult(null);
                setLoading(false);
            } }));
    }
    // If the domain selector is open, render it instead of the form
    if (domainSelector.isOpen) {
        return domainSelector.selectorComponent;
    }
    return (_jsxs(Layout, { headerText: `${config.baseTitle} - Domains - Verify`, showNavigationInstructions: true, navigationContext: "form-single", children: [isDryRun && (_jsx(Box, { marginBottom: 1, children: _jsx(Alert, { variant: "warning", children: "DRY RUN MODE - No API calls will be made" }) })), _jsx(SimpleForm, { fields: formFields, onSubmit: handleSubmit, onCancel: onExit, validateWith: verifyDomainSchema, initialData: initialFormData })] }));
};
//# sourceMappingURL=Form.js.map