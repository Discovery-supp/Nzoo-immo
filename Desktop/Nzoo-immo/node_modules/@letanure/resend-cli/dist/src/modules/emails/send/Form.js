import { jsx as _jsx } from "react/jsx-runtime";
import { Spinner } from '@inkjs/ui';
import { useInput } from 'ink';
import { useState } from 'react';
import { SimpleForm } from '../../../components/forms/SimpleForm.js';
import { ErrorScreen } from '../../../components/ui/ErrorScreen.js';
import { Layout } from '../../../components/ui/layout.js';
import { SuccessScreen } from '../../../components/ui/SuccessScreen.js';
import { config } from '../../../config/config.js';
import { useDryRun } from '../../../contexts/DryRunProvider.js';
import { useResend } from '../../../contexts/ResendProvider.js';
import { sendEmail } from './action.js';
import { fields } from './fields.js';
import { CreateEmailOptionsSchema } from './schema.js';
export const Form = ({ onExit }) => {
    const { apiKey } = useResend();
    const { isDryRun } = useDryRun();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [successData, setSuccessData] = useState(null);
    const [isDryRunSuccess, setIsDryRunSuccess] = useState(false);
    const [error, setError] = useState(null);
    // Handle Esc/Left arrow key to go back from result screens
    useInput((_input, key) => {
        if ((key.escape || key.leftArrow) && (successData || error)) {
            setSuccessData(null);
            setIsDryRunSuccess(false);
            setError(null);
        }
    }, { isActive: !!(successData || error) });
    const handleSubmit = async (validatedData) => {
        setIsSubmitting(true);
        try {
            // In dry-run mode, show validated data
            if (isDryRun) {
                setSuccessData({
                    ...validatedData,
                    'API Key': apiKey ? `${apiKey.substring(0, 10)}...` : 'Not set',
                    Status: 'Validation successful! (Email not sent due to dry-run mode)',
                });
                setIsDryRunSuccess(true);
            }
            else {
                // Send the email
                const result = await sendEmail(validatedData, apiKey);
                if (result.success && result.data) {
                    // Show the sent email data
                    setSuccessData({
                        ...validatedData,
                        id: result.data.id,
                        created_at: new Date().toISOString(),
                        last_event: 'sent',
                    });
                    setIsDryRunSuccess(false);
                }
                else {
                    setError({
                        title: 'Email Send Failed',
                        message: result.error || 'Unknown error occurred',
                        suggestion: 'Check your API key, recipient email, and sender domain',
                    });
                }
            }
        }
        catch (error) {
            setError({
                title: 'Email Send Error',
                message: error instanceof Error ? error.message : 'Unknown error',
                suggestion: 'Please check your API key and network connection',
            });
        }
        finally {
            setIsSubmitting(false);
        }
    };
    if (isSubmitting) {
        return (_jsx(Layout, { headerText: `${config.baseTitle} - Emails - Send`, children: _jsx(Spinner, { label: "Sending email..." }) }));
    }
    if (successData) {
        return (_jsx(SuccessScreen, { data: successData, successMessage: "Email Sent Successfully", headerText: `${config.baseTitle} - Emails - Send`, isDryRun: isDryRunSuccess, onExit: () => {
                setSuccessData(null);
                setIsDryRunSuccess(false);
                onExit();
            } }));
    }
    if (error) {
        return (_jsx(ErrorScreen, { title: error.title, message: error.message, suggestion: error.suggestion, headerText: `${config.baseTitle} - Emails - Send`, onExit: () => {
                setError(null);
                onExit();
            }, showRetry: true, onRetry: () => {
                setError(null);
                setIsSubmitting(false);
            } }));
    }
    return (_jsx(Layout, { headerText: `${config.baseTitle} - Emails - Send`, showNavigationInstructions: true, navigationContext: "form", children: _jsx(SimpleForm, { fields: fields, validateWith: CreateEmailOptionsSchema, onSubmit: handleSubmit, onCancel: onExit }) }));
};
//# sourceMappingURL=Form.js.map