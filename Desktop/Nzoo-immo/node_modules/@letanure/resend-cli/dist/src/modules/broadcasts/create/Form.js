import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import { SimpleForm } from '../../../components/forms/SimpleForm.js';
import { Layout } from '../../../components/ui/layout.js';
import { config } from '../../../config/config.js';
import { useResend } from '../../../contexts/ResendProvider.js';
import { useAudienceSelector } from '../../../hooks/index.js';
import { createBroadcast } from './action.js';
import { createBroadcastFields } from './fields.js';
import { createBroadcastSchema } from './schema.js';
export const Form = ({ onExit }) => {
    const { apiKey } = useResend();
    const [selectedAudienceId, setSelectedAudienceId] = React.useState('');
    // Get initial data from selected IDs
    const initialFormData = React.useMemo(() => {
        const data = {};
        if (selectedAudienceId) {
            data.audienceId = selectedAudienceId;
        }
        return Object.keys(data).length > 0 ? data : undefined;
    }, [selectedAudienceId]);
    // Selector for audiences
    const audienceSelector = useAudienceSelector((audienceId) => setSelectedAudienceId(audienceId));
    // Create form fields with selector callbacks
    const formFields = React.useMemo(() => {
        return createBroadcastFields.map((field) => {
            if (field.name === 'audienceId') {
                return {
                    ...field,
                    onSelectorOpen: () => audienceSelector.openSelector(),
                };
            }
            return field;
        });
    }, [audienceSelector]);
    const handleSubmit = async (data) => {
        return await createBroadcast(data, apiKey);
    };
    // Show selector when open
    if (audienceSelector.isOpen) {
        return audienceSelector.selectorComponent;
    }
    return (_jsx(Layout, { headerText: `${config.baseTitle} - Broadcasts - Create`, showNavigationInstructions: true, navigationContext: "form-single", children: _jsx(SimpleForm, { fields: formFields, onSubmit: handleSubmit, onCancel: onExit, validateWith: createBroadcastSchema, initialData: initialFormData }) }));
};
//# sourceMappingURL=Form.js.map