import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Alert, Spinner } from '@inkjs/ui';
import { Box, Text, useInput } from 'ink';
import React, { useState } from 'react';
import { SimpleForm } from '../../../components/forms/SimpleForm.js';
import { ErrorScreen } from '../../../components/ui/ErrorScreen.js';
import { Layout } from '../../../components/ui/layout.js';
import { Table } from '../../../components/ui/Table.js';
import { config } from '../../../config/config.js';
import { useDryRun } from '../../../contexts/DryRunProvider.js';
import { useResend } from '../../../contexts/ResendProvider.js';
import { useAudienceSelector } from '../../../hooks/index.js';
import { listContacts } from './action.js';
import { displayFields, listContactFields } from './fields.js';
import { ListContactsOptionsSchema } from './schema.js';
export const Form = ({ onExit }) => {
    const { isDryRun } = useDryRun();
    const { apiKey } = useResend();
    const [isLoading, setIsLoading] = useState(false);
    const [contactsList, setContactsList] = useState(null);
    const [showDryRunData, setShowDryRunData] = useState(null);
    const [error, setError] = useState(null);
    const [selectedAudienceId, setSelectedAudienceId] = useState('');
    // Get initial data from selected IDs
    const initialFormData = React.useMemo(() => {
        const data = {};
        if (selectedAudienceId) {
            data.audienceId = selectedAudienceId;
        }
        return Object.keys(data).length > 0 ? data : undefined;
    }, [selectedAudienceId]);
    // Selector for audiences
    const audienceSelector = useAudienceSelector((audienceId) => setSelectedAudienceId(audienceId));
    // Create form fields with selector callbacks
    const formFields = React.useMemo(() => {
        return listContactFields.map((field) => {
            if (field.name === 'audienceId') {
                return {
                    ...field,
                    onSelectorOpen: () => audienceSelector.openSelector(),
                };
            }
            return field;
        });
    }, [audienceSelector]);
    // Handle Esc key to go back from result screens
    useInput((_input, key) => {
        if ((key.escape || key.leftArrow) && (contactsList || showDryRunData || error)) {
            setContactsList(null);
            setShowDryRunData(null);
            setError(null);
        }
    }, { isActive: !!(contactsList || showDryRunData || error) });
    const handleSubmit = async (data) => {
        setIsLoading(true);
        try {
            if (isDryRun) {
                // Show mock data for dry run
                setShowDryRunData([
                    {
                        id: 'dry-run-contact-1',
                        email: 'user1@example.com',
                        firstName: 'John',
                        lastName: 'Doe',
                        created_at: '2023-10-06T22:59:55.977Z',
                        subscribed: 'Yes',
                    },
                    {
                        id: 'dry-run-contact-2',
                        email: 'user2@example.com',
                        firstName: 'Jane',
                        lastName: 'Smith',
                        created_at: '2023-10-07T10:30:12.123Z',
                        subscribed: 'No',
                    },
                ]);
            }
            else {
                const result = await listContacts(data, apiKey);
                if (result.success && result.data) {
                    // Convert the list response to array format for table
                    const contacts = result.data.data || [];
                    setContactsList(contacts.map((contact) => ({
                        id: contact.id,
                        email: contact.email,
                        firstName: contact.first_name || '',
                        lastName: contact.last_name || '',
                        created_at: contact.created_at,
                        subscribed: contact.unsubscribed ? 'No' : 'Yes',
                    })));
                }
                else {
                    setError({
                        title: 'Failed to Load Contacts',
                        message: result.error || 'Unknown error occurred',
                        suggestion: 'Check the audience ID and ensure it exists in your Resend account',
                    });
                }
            }
        }
        catch (error) {
            setError({
                title: 'Contact List Error',
                message: error instanceof Error ? error.message : 'Unknown error',
                suggestion: 'Please check your API key and network connection',
            });
        }
        finally {
            setIsLoading(false);
        }
    };
    if (isLoading) {
        return (_jsx(Layout, { headerText: `${config.baseTitle} - Contacts - List`, showNavigationInstructions: false, navigationContext: "none", children: _jsx(Spinner, { label: "Loading contacts..." }) }));
    }
    if (error) {
        return (_jsx(ErrorScreen, { title: error.title, message: error.message, suggestion: error.suggestion, headerText: `${config.baseTitle} - Contacts - List`, onExit: () => {
                setError(null);
                onExit();
            }, showRetry: true, onRetry: () => {
                setError(null);
                setIsLoading(true);
            } }));
    }
    if (showDryRunData) {
        return (_jsx(Layout, { headerText: `${config.baseTitle} - Contacts - List`, showNavigationInstructions: true, navigationContext: "result", children: _jsxs(Box, { flexDirection: "column", children: [_jsx(Box, { marginBottom: 1, children: _jsx(Alert, { variant: "warning", children: "DRY RUN MODE - Sample data (no API calls made)" }) }), _jsx(Table, { data: showDryRunData, fields: displayFields, title: "Contacts" })] }) }));
    }
    if (contactsList) {
        return (_jsx(Layout, { headerText: `${config.baseTitle} - Contacts - List`, showNavigationInstructions: true, navigationContext: "result", children: _jsxs(Box, { flexDirection: "column", children: [_jsx(Table, { data: contactsList, fields: displayFields, title: "Contacts" }), _jsx(Box, { marginTop: 1, children: _jsx(Text, { dimColor: true, children: "Press Esc to go back" }) })] }) }));
    }
    // Show selector when open
    if (audienceSelector.isOpen) {
        return audienceSelector.selectorComponent;
    }
    return (_jsx(Layout, { headerText: `${config.baseTitle} - Contacts - List`, showNavigationInstructions: true, navigationContext: "form-single", children: _jsx(SimpleForm, { fields: formFields, onSubmit: handleSubmit, onCancel: onExit, validateWith: ListContactsOptionsSchema, initialData: initialFormData }) }));
};
//# sourceMappingURL=Form.js.map