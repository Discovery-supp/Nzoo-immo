#!/usr/bin/env node

/**
 * üîç Script de Debug - Modal de Modification des R√©servations
 * 
 * Ce script teste √©tape par √©tape le processus de modification
 * pour identifier o√π le probl√®me se situe.
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (copi√©e depuis votre code)
const supabaseUrl = 'https://nnkywmfxoohehtyyzzgp.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ua3l3bWZ4b29oZWh0eXl6emdwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNDQ3NTcsImV4cCI6MjA2OTcyMDc1N30.VZtsHLfbVks1uLhfnjW6uJSP0-J-Z30-WWT5D_B8Jpk';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîç Debug du Modal de Modification des R√©servations');
console.log('==================================================\n');

/**
 * Test 1: V√©rifier la structure de la table reservations
 */
async function testTableStructure() {
  console.log('üìã Test 1: Structure de la table reservations');
  console.log('--------------------------------------------');
  
  try {
    const { data, error } = await supabase
      .from('reservations')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erreur lors de la lecture de la table:', error);
      return false;
    }
    
    if (data && data.length > 0) {
      const columns = Object.keys(data[0]);
      console.log('‚úÖ Structure de la table d√©tect√©e:');
      columns.forEach(col => console.log(`   - ${col}`));
      
      // V√©rifier les colonnes critiques pour la modification
      const criticalColumns = ['id', 'full_name', 'email', 'phone', 'status', 'updated_at'];
      const missingColumns = criticalColumns.filter(col => !columns.includes(col));
      
      if (missingColumns.length > 0) {
        console.error('‚ùå Colonnes manquantes:', missingColumns);
        return false;
      }
      
      console.log('‚úÖ Toutes les colonnes critiques sont pr√©sentes');
      return data[0];
    } else {
      console.error('‚ùå Aucune donn√©e dans la table reservations');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test de structure:', error);
    return false;
  }
}

/**
 * Test 2: V√©rifier les permissions de mise √† jour
 */
async function testUpdatePermissions() {
  console.log('\nüîê Test 2: Permissions de mise √† jour');
  console.log('--------------------------------------');
  
  try {
    // Essayer de lire une r√©servation existante
    const { data: readData, error: readError } = await supabase
      .from('reservations')
      .select('id, full_name, status')
      .limit(1);
    
    if (readError) {
      console.error('‚ùå Erreur de lecture:', readError);
      return false;
    }
    
    if (!readData || readData.length === 0) {
      console.error('‚ùå Aucune r√©servation trouv√©e pour le test');
      return false;
    }
    
    const testReservation = readData[0];
    console.log('‚úÖ R√©servation de test trouv√©e:', {
      id: testReservation.id,
      full_name: testReservation.full_name,
      status: testReservation.status
    });
    
    // Essayer une mise √† jour simple
    const testNote = `Test de mise √† jour - ${new Date().toISOString()}`;
    const { data: updateData, error: updateError } = await supabase
      .from('reservations')
      .update({ 
        admin_notes: testNote,
        updated_at: new Date().toISOString()
      })
      .eq('id', testReservation.id)
      .select();
    
    if (updateError) {
      console.error('‚ùå Erreur de mise √† jour:', updateError);
      console.error('   Code:', updateError.code);
      console.error('   Message:', updateError.message);
      console.error('   D√©tails:', updateError.details);
      return false;
    }
    
    console.log('‚úÖ Mise √† jour r√©ussie:', updateData);
    
    // Restaurer les donn√©es originales
    const { error: restoreError } = await supabase
      .from('reservations')
      .update({ 
        admin_notes: '',
        updated_at: new Date().toISOString()
      })
      .eq('id', testReservation.id);
    
    if (restoreError) {
      console.warn('‚ö†Ô∏è Impossible de restaurer les donn√©es originales:', restoreError);
    } else {
      console.log('üîÑ Donn√©es originales restaur√©es');
    }
    
    return testReservation;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de permissions:', error);
    return false;
  }
}

/**
 * Test 3: Simulation compl√®te du processus de modification
 */
async function testCompleteModificationFlow(reservationId) {
  console.log('\nüîÑ Test 3: Simulation du processus complet de modification');
  console.log('--------------------------------------------------------');
  
  if (!reservationId) {
    console.error('‚ùå Impossible de tester sans ID de r√©servation');
    return false;
  }
  
  try {
    // 1. Lire la r√©servation originale
    const { data: readData, error: readError } = await supabase
      .from('reservations')
      .select('*')
      .eq('id', reservationId)
      .single();
    
    if (readError) {
      console.error('‚ùå Erreur de lecture:', readError);
      return false;
    }
    
    const originalReservation = readData;
    console.log('üìñ R√©servation originale:', {
      id: originalReservation.id,
      full_name: originalReservation.full_name,
      status: originalReservation.status,
      admin_notes: originalReservation.admin_notes
    });
    
    // 2. Pr√©parer les donn√©es de mise √† jour
    const updateData = {
      full_name: `Test Modifi√© ${Date.now()}`,
      status: 'confirmed',
      admin_notes: `Test automatique - ${new Date().toISOString()}`,
      updated_at: new Date().toISOString()
    };
    
    console.log('üìù Donn√©es de mise √† jour:', updateData);
    
    // 3. Effectuer la mise √† jour
    const { data: updateResult, error: updateError } = await supabase
      .from('reservations')
      .update(updateData)
      .eq('id', reservationId)
      .select();
    
    if (updateError) {
      console.error('‚ùå Erreur lors de la mise √† jour:', updateError);
      return false;
    }
    
    console.log('‚úÖ Mise √† jour effectu√©e');
    
    // 4. V√©rifier que la mise √† jour a bien √©t√© enregistr√©e
    const { data: verifyData, error: verifyError } = await supabase
      .from('reservations')
      .select('*')
      .eq('id', reservationId)
      .single();
    
    if (verifyError) {
      console.error('‚ùå Erreur lors de la v√©rification:', verifyError);
      return false;
    }
    
    console.log('üîç V√©rification de la mise √† jour:');
    console.log('   - Nom original:', originalReservation.full_name);
    console.log('   - Nom apr√®s mise √† jour:', verifyData.full_name);
    console.log('   - Statut original:', originalReservation.status);
    console.log('   - Statut apr√®s mise √† jour:', verifyData.status);
    console.log('   - Notes admin originales:', originalReservation.admin_notes);
    console.log('   - Notes admin apr√®s mise √† jour:', verifyData.admin_notes);
    
    // 5. V√©rifier que les changements sont bien pr√©sents
    const changesApplied = 
      verifyData.full_name === updateData.full_name &&
      verifyData.status === updateData.status &&
      verifyData.admin_notes === updateData.admin_notes;
    
    if (changesApplied) {
      console.log('‚úÖ Tous les changements ont √©t√© appliqu√©s avec succ√®s');
      
      // 6. Restaurer les donn√©es originales
      const { error: restoreError } = await supabase
        .from('reservations')
        .update({
          full_name: originalReservation.full_name,
          status: originalReservation.status,
          admin_notes: originalReservation.admin_notes,
          updated_at: new Date().toISOString()
        })
        .eq('id', reservationId);
      
      if (restoreError) {
        console.warn('‚ö†Ô∏è Impossible de restaurer les donn√©es originales:', restoreError);
      } else {
        console.log('üîÑ Donn√©es originales restaur√©es');
      }
      
      return true;
    } else {
      console.error('‚ùå Les changements n\'ont pas √©t√© appliqu√©s correctement');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test complet:', error);
    return false;
  }
}

/**
 * Test 4: V√©rifier les politiques RLS
 */
async function testRLSPolicies() {
  console.log('\nüîí Test 4: V√©rification des politiques RLS');
  console.log('--------------------------------------------');
  
  try {
    // Essayer de lire les politiques de la table reservations
    const { data: policies, error: policyError } = await supabase
      .from('reservations')
      .select('*')
      .limit(1);
    
    if (policyError) {
      console.error('‚ùå Erreur lors de la lecture des politiques:', policyError);
      console.error('   Code:', policyError.code);
      console.error('   Message:', policyError.message);
      
      if (policyError.code === '42501') {
        console.log('‚ö†Ô∏è Erreur 42501: Permission refus√©e - Probl√®me de politique RLS');
      }
      
      return false;
    }
    
    console.log('‚úÖ Politiques RLS fonctionnent correctement');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des politiques:', error);
    return false;
  }
}

/**
 * Fonction principale de diagnostic
 */
async function runDiagnostic() {
  console.log('üöÄ D√©marrage du diagnostic complet...\n');
  
  const results = {
    tableStructure: false,
    updatePermissions: false,
    completeFlow: false,
    rlsPolicies: false
  };
  
  try {
    // Test 1: Structure de table
    const sampleReservation = await testTableStructure();
    results.tableStructure = !!sampleReservation;
    
    if (!sampleReservation) {
      console.log('\n‚ùå La structure de table a √©chou√©. Arr√™t des tests.');
      return;
    }
    
    // Test 2: Permissions de mise √† jour
    const testReservation = await testUpdatePermissions();
    results.updatePermissions = !!testReservation;
    
    if (!testReservation) {
      console.log('\n‚ùå Les permissions de mise √† jour ont √©chou√©. Arr√™t des tests.');
      return;
    }
    
    // Test 3: Processus complet
    results.completeFlow = await testCompleteModificationFlow(testReservation.id);
    
    // Test 4: Politiques RLS
    results.rlsPolicies = await testRLSPolicies();
    
    // R√©sum√© des r√©sultats
    console.log('\nüìä R√âSUM√â DU DIAGNOSTIC');
    console.log('========================');
    console.log(`‚úÖ Structure de table: ${results.tableStructure ? 'OK' : '‚ùå'}`);
    console.log(`‚úÖ Permissions de mise √† jour: ${results.updatePermissions ? 'OK' : '‚ùå'}`);
    console.log(`‚úÖ Processus complet: ${results.completeFlow ? 'OK' : '‚ùå'}`);
    console.log(`‚úÖ Politiques RLS: ${results.rlsPolicies ? 'OK' : '‚ùå'}`);
    
    const successCount = Object.values(results).filter(Boolean).length;
    const totalTests = Object.keys(results).length;
    
    console.log(`\nüéØ Score: ${successCount}/${totalTests} tests r√©ussis`);
    
    if (successCount === totalTests) {
      console.log('üéâ Tous les tests sont pass√©s ! Le probl√®me pourrait √™tre c√¥t√© frontend.');
      console.log('\nüîç V√©rifications frontend recommand√©es:');
      console.log('   1. V√©rifier que le modal s\'ouvre correctement');
      console.log('   2. V√©rifier que handleEditReservation est appel√©');
      console.log('   3. V√©rifier que handleSaveReservation est appel√©');
      console.log('   4. V√©rifier que les logs de debug s\'affichent');
    } else {
      console.log('‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration de votre base de donn√©es.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur critique lors du diagnostic:', error);
  }
}

// Ex√©cuter le diagnostic si le script est appel√© directement
if (require.main === module) {
  runDiagnostic().catch(console.error);
}

module.exports = {
  runDiagnostic,
  testTableStructure,
  testUpdatePermissions,
  testCompleteModificationFlow,
  testRLSPolicies
};
