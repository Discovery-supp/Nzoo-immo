import { supabase } from '../lib/supabase';

export interface Notification {
  id: string;
  type: 'pending' | 'expiring' | 'exception' | 'overdue';
  title: string;
  message: string;
  timestamp: Date;
  reservationId?: string;
  userId?: string;
  userEmail?: string; // Ajout de l'email pour v√©rification de s√©curit√©
  read: boolean;
  priority: 'low' | 'medium' | 'high' | 'urgent';
}

export interface NotificationStats {
  total: number;
  unread: number;
  pending: number;
  expiring: number;
  exceptions: number;
  overdue: number;
}

class NotificationService {
  // Charger toutes les notifications pour un utilisateur
  async loadNotifications(userRole: string, userEmail: string): Promise<Notification[]> {
    try {
      console.log('üîî Chargement des notifications pour:', { userRole, userEmail });
      
      // Validation des param√®tres d'entr√©e
      if (!userRole || userRole.trim() === '') {
        console.warn('üîí ATTENTION: R√¥le utilisateur vide ou non d√©fini, utilisation du r√¥le par d√©faut "clients"');
        userRole = 'clients';
      }
      
      if (!userEmail || userEmail.trim() === '') {
        console.warn('üîí ATTENTION: Email utilisateur vide ou non d√©fini');
        return [];
      }
      
      // V√©rification de s√©curit√© : les clients ne peuvent voir que leurs propres r√©servations
      if (userRole === 'clients') {
        if (!userEmail) {
          console.error('üîí ERREUR: Email requis pour les clients');
          return [];
        }
        
        console.log('üîî Filtrage strict pour client avec email:', userEmail);
        const { data: reservations, error } = await supabase
          .from('reservations')
          .select('*')
          .eq('email', userEmail) // Filtrage strict par email
          .order('created_at', { ascending: false });

        if (error) {
          console.error('Erreur lors du chargement des r√©servations client:', error);
          return [];
        }

        console.log('üîî R√©servations client trouv√©es:', reservations?.length || 0);
        return this.processReservationsToNotifications(reservations || [], userRole, userEmail);
      } 
      
      // Pour les admins/users : acc√®s √† toutes les r√©servations
      else if (userRole === 'admin' || userRole === 'user') {
        console.log('üîî Chargement de toutes les r√©servations pour admin/user');
        const { data: reservations, error } = await supabase
          .from('reservations')
          .select('*')
          .order('created_at', { ascending: false });

        if (error) {
          console.error('Erreur lors du chargement des r√©servations admin:', error);
          return [];
        }

        console.log('üîî R√©servations admin trouv√©es:', reservations?.length || 0);
        return this.processReservationsToNotifications(reservations || [], userRole, userEmail);
      }
      
      // R√¥le non reconnu
      else {
        console.error('üîí ERREUR: R√¥le non reconnu:', userRole);
        return [];
      }
    } catch (error) {
      console.error('Erreur dans le service de notifications:', error);
      return [];
    }
  }

  // Traiter les r√©servations pour g√©n√©rer les notifications
  private processReservationsToNotifications(reservations: any[], userRole?: string, userEmail?: string): Notification[] {
    const currentDate = new Date();
    const notifications: Notification[] = [];

    // V√©rification de s√©curit√© suppl√©mentaire pour les clients
    if (userRole === 'clients' && userEmail) {
      // Filtrer une seconde fois pour s'assurer qu'aucune r√©servation d'un autre client n'est trait√©e
      reservations = reservations.filter(reservation => reservation.email === userEmail);
      console.log('üîí V√©rification de s√©curit√©: r√©servations filtr√©es pour client:', reservations.length);
    }

    reservations.forEach((reservation) => {
      const startDate = new Date(reservation.start_date);
      const endDate = new Date(reservation.end_date);
      const daysUntilExpiry = Math.ceil((endDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));
      const daysUntilStart = Math.ceil((startDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));

      // NOTIFICATIONS POUR LES CLIENTS (seulement leurs propres r√©servations)
      if (userRole === 'clients') {
        // V√©rification de s√©curit√© : s'assurer que la r√©servation appartient bien au client
        if (reservation.email !== userEmail) {
          console.warn('üîí TENTATIVE D\'ACC√àS NON AUTORIS√â: R√©servation ne correspond pas au client', {
            reservationEmail: reservation.email,
            userEmail: userEmail,
            reservationId: reservation.id
          });
          return; // Ignorer cette r√©servation
        }

        // Notification de confirmation de r√©servation
        if (reservation.status === 'confirmed' && daysUntilStart > 0) {
          notifications.push({
            id: `confirmed-${reservation.id}`,
            type: 'pending',
            title: '‚úÖ R√©servation confirm√©e !',
            message: `Votre r√©servation #${reservation.id} a √©t√© confirm√©e. D√©but le ${startDate.toLocaleDateString('fr-FR')}`,
            timestamp: new Date(reservation.created_at),
            reservationId: reservation.id,
            userEmail: userEmail, // Ajout de l'email pour tra√ßabilit√©
            read: false,
            priority: 'medium'
          });
        }

        // Notification de r√©servation en attente
        if (reservation.status === 'pending') {
          notifications.push({
            id: `pending-${reservation.id}`,
            type: 'pending',
            title: '‚è≥ R√©servation en attente',
            message: `Votre r√©servation #${reservation.id} est en attente de confirmation`,
            timestamp: new Date(reservation.created_at),
            reservationId: reservation.id,
            userEmail: userEmail,
            read: false,
            priority: 'medium'
          });
        }

        // Notification 3 jours avant le d√©but
        if (daysUntilStart === 3 && reservation.status === 'confirmed') {
          notifications.push({
            id: `starting-soon-${reservation.id}`,
            type: 'expiring',
            title: 'üöÄ Votre r√©servation commence bient√¥t',
            message: `Votre r√©servation #${reservation.id} commence dans 3 jours (${startDate.toLocaleDateString('fr-FR')})`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: userEmail,
            read: false,
            priority: 'high'
          });
        }

        // Notification 1 jour avant le d√©but
        if (daysUntilStart === 1 && reservation.status === 'confirmed') {
          notifications.push({
            id: `starting-tomorrow-${reservation.id}`,
            type: 'expiring',
            title: 'üìÖ Votre r√©servation commence demain',
            message: `Votre r√©servation #${reservation.id} commence demain (${startDate.toLocaleDateString('fr-FR')})`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: userEmail,
            read: false,
            priority: 'high'
          });
        }

        // Notification le jour du d√©but
        if (daysUntilStart === 0 && reservation.status === 'confirmed') {
          notifications.push({
            id: `starting-today-${reservation.id}`,
            type: 'exception',
            title: 'üéâ Votre r√©servation commence aujourd\'hui !',
            message: `Votre r√©servation #${reservation.id} commence aujourd'hui. Bon travail !`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: userEmail,
            read: false,
            priority: 'urgent'
          });
        }

        // Notification 1 jour avant la fin
        if (daysUntilExpiry === 1 && reservation.status === 'confirmed') {
          notifications.push({
            id: `ending-tomorrow-${reservation.id}`,
            type: 'expiring',
            title: '‚ö†Ô∏è Votre r√©servation se termine demain',
            message: `Votre r√©servation #${reservation.id} se termine demain (${endDate.toLocaleDateString('fr-FR')})`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: userEmail,
            read: false,
            priority: 'high'
          });
        }

        // Notification le jour de la fin
        if (daysUntilExpiry === 0 && reservation.status === 'confirmed') {
          notifications.push({
            id: `ending-today-${reservation.id}`,
            type: 'exception',
            title: 'üìã Votre r√©servation se termine aujourd\'hui',
            message: `Votre r√©servation #${reservation.id} se termine aujourd'hui. Merci de votre confiance !`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: userEmail,
            read: false,
            priority: 'urgent'
          });
        }

        // Notification de r√©servation expir√©e
        if (daysUntilExpiry < 0 && reservation.status === 'confirmed') {
          notifications.push({
            id: `expired-${reservation.id}`,
            type: 'overdue',
            title: '‚ùå R√©servation expir√©e',
            message: `Votre r√©servation #${reservation.id} a expir√© depuis ${Math.abs(daysUntilExpiry)} jour(s)`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: userEmail,
            read: false,
            priority: 'urgent'
          });
        }
      }

      // NOTIFICATIONS POUR LES ADMINISTRATEURS (toutes les r√©servations)
      if (userRole === 'admin' || userRole === 'user') {
        // Notifications pour les r√©servations en attente depuis plus de 24h
        const hoursSinceCreation = (currentDate.getTime() - new Date(reservation.created_at).getTime()) / (1000 * 60 * 60);
        if (reservation.status === 'pending' && hoursSinceCreation > 24) {
          notifications.push({
            id: `pending-old-${reservation.id}`,
            type: 'pending',
            title: '‚è∞ R√©servation en attente depuis longtemps',
            message: `R√©servation #${reservation.id} de ${reservation.full_name} (${reservation.email}) en attente depuis ${Math.floor(hoursSinceCreation)}h`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: reservation.email, // Email du client concern√©
            read: false,
            priority: 'high'
          });
        }

        // Notifications pour les r√©servations qui commencent aujourd'hui
        if (daysUntilStart === 0 && reservation.status === 'confirmed') {
          notifications.push({
            id: `starting-${reservation.id}`,
            type: 'pending',
            title: 'üöÄ R√©servation commence aujourd\'hui',
            message: `R√©servation #${reservation.id} de ${reservation.full_name} (${reservation.email}) commence aujourd'hui`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: reservation.email,
            read: false,
            priority: 'medium'
          });
        }

        // Notifications pour les r√©servations qui se terminent aujourd'hui
        if (daysUntilExpiry === 0 && reservation.status === 'confirmed') {
          notifications.push({
            id: `ending-${reservation.id}`,
            type: 'expiring',
            title: 'üìã R√©servation se termine aujourd\'hui',
            message: `R√©servation #${reservation.id} de ${reservation.full_name} (${reservation.email}) se termine aujourd'hui`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: reservation.email,
            read: false,
            priority: 'medium'
          });
        }

        // Notifications pour les r√©servations expir√©es
        if (daysUntilExpiry < 0 && reservation.status === 'confirmed') {
          notifications.push({
            id: `overdue-admin-${reservation.id}`,
            type: 'overdue',
            title: '‚ùå R√©servation expir√©e',
            message: `R√©servation #${reservation.id} de ${reservation.full_name} (${reservation.email}) a expir√© depuis ${Math.abs(daysUntilExpiry)} jour(s)`,
            timestamp: new Date(),
            reservationId: reservation.id,
            userEmail: reservation.email,
            read: false,
            priority: 'urgent'
          });
        }
      }
    });

    // Trier par priorit√© et date
    return notifications.sort((a, b) => {
      const priorityOrder = { urgent: 0, high: 1, medium: 2, low: 3 };
      const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];
      
      if (priorityDiff !== 0) return priorityDiff;
      
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
  }

  // Obtenir les statistiques des notifications
  async getNotificationStats(userRole: string, userEmail: string): Promise<NotificationStats> {
    // V√©rification de s√©curit√© : les clients ne peuvent voir que leurs propres statistiques
    if (userRole === 'clients' && !userEmail) {
      console.error('üîí ERREUR: Email requis pour les statistiques client');
      return {
        total: 0,
        unread: 0,
        pending: 0,
        expiring: 0,
        exceptions: 0,
        overdue: 0
      };
    }

    const notifications = await this.loadNotifications(userRole, userEmail);
    
    return {
      total: notifications.length,
      unread: notifications.filter(n => !n.read).length,
      pending: notifications.filter(n => n.type === 'pending').length,
      expiring: notifications.filter(n => n.type === 'expiring').length,
      exceptions: notifications.filter(n => n.type === 'exception').length,
      overdue: notifications.filter(n => n.type === 'overdue').length
    };
  }

  // Marquer une notification comme lue
  async markAsRead(notificationId: string, userRole: string, userEmail: string): Promise<boolean> {
    try {
      // V√©rification de s√©curit√© : les clients ne peuvent marquer que leurs propres notifications
      if (userRole === 'clients') {
        // Dans une impl√©mentation compl√®te, on v√©rifierait que la notification appartient bien au client
        console.log('üîí Marquage comme lu pour client:', { notificationId, userEmail });
      }
      
      // Dans une impl√©mentation compl√®te, on sauvegarderait cela en base
      // Pour l'instant, on retourne true pour simuler le succ√®s
      return true;
    } catch (error) {
      console.error('Erreur lors du marquage comme lu:', error);
      return false;
    }
  }

  // Marquer toutes les notifications comme lues
  async markAllAsRead(userRole: string, userEmail: string): Promise<boolean> {
    try {
      // V√©rification de s√©curit√© : les clients ne peuvent marquer que leurs propres notifications
      if (userRole === 'clients' && !userEmail) {
        console.error('üîí ERREUR: Email requis pour marquer toutes les notifications comme lues');
        return false;
      }
      
      // Dans une impl√©mentation compl√®te, on sauvegarderait cela en base
      // Pour l'instant, on retourne true pour simuler le succ√®s
      return true;
    } catch (error) {
      console.error('Erreur lors du marquage de toutes les notifications:', error);
      return false;
    }
  }

  // Supprimer une notification
  async removeNotification(notificationId: string, userRole: string, userEmail: string): Promise<boolean> {
    try {
      // V√©rification de s√©curit√© : les clients ne peuvent supprimer que leurs propres notifications
      if (userRole === 'clients') {
        // Dans une impl√©mentation compl√®te, on v√©rifierait que la notification appartient bien au client
        console.log('üîí Suppression de notification pour client:', { notificationId, userEmail });
      }
      
      // Dans une impl√©mentation compl√®te, on supprimerait cela de la base
      // Pour l'instant, on retourne true pour simuler le succ√®s
      return true;
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      return false;
    }
  }

  // Cr√©er une notification personnalis√©e
  async createCustomNotification(
    type: Notification['type'],
    title: string,
    message: string,
    userId: string,
    userEmail: string,
    reservationId?: string,
    priority: Notification['priority'] = 'medium'
  ): Promise<Notification> {
    const notification: Notification = {
      id: `custom-${Date.now()}`,
      type,
      title,
      message,
      timestamp: new Date(),
      userId,
      userEmail, // Ajout de l'email pour tra√ßabilit√©
      reservationId,
      read: false,
      priority
    };

    // Dans une impl√©mentation compl√®te, on sauvegarderait cela en base
    return notification;
  }

  // V√©rifier les notifications en temps r√©el
  async checkRealTimeNotifications(userRole: string, userEmail: string): Promise<Notification[]> {
    // Cette fonction pourrait √™tre appel√©e p√©riodiquement pour v√©rifier les nouvelles notifications
    return this.loadNotifications(userRole, userEmail);
  }
}

export const notificationService = new NotificationService();
