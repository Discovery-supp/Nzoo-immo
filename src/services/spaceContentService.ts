import { SpaceInfo } from '../data/spacesData';
import { SpaceDatabaseService } from './spaceDatabaseService';

const STORAGE_KEY = 'nzoo_spaces_content';

export interface SpaceContentData {
  [key: string]: SpaceInfo & {
    lastModified?: string;
  };
}

export class SpaceContentService {
  // R√©cup√©rer les donn√©es sauvegard√©es (priorit√© √† la base de donn√©es)
  static async getSavedContent(language: 'fr' | 'en' = 'fr'): Promise<SpaceContentData | null> {
    try {
      // 1. Essayer de charger depuis la base de donn√©es en premier
      const dbData = await SpaceDatabaseService.loadFromDatabase(language);
      if (dbData) {
        console.log('‚úÖ Donn√©es charg√©es depuis la base de donn√©es');
        return dbData;
      }

      // 2. Fallback vers le localStorage
      const storedData = localStorage.getItem(STORAGE_KEY);
      if (storedData) {
        const parsedData = JSON.parse(storedData);
        console.log('‚úÖ Donn√©es charg√©es depuis le localStorage');
        return parsedData;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des donn√©es:', error);
      return null;
    }
  }

  // Sauvegarder les donn√©es (double sauvegarde)
  static async saveContent(data: SpaceContentData, language: 'fr' | 'en' = 'fr'): Promise<void> {
    try {
      // Ajouter la date de modification
      const dataWithTimestamp = Object.keys(data).reduce((acc, key) => {
        acc[key] = {
          ...data[key],
          lastModified: new Date().toISOString()
        };
        return acc;
      }, {} as SpaceContentData);

      // 1. Sauvegarder dans le localStorage (imm√©diat)
      localStorage.setItem(STORAGE_KEY, JSON.stringify(dataWithTimestamp));
      console.log('‚úÖ Donn√©es des espaces sauvegard√©es dans le localStorage');

      // 2. Sauvegarder en base de donn√©es (en arri√®re-plan)
      try {
        await SpaceDatabaseService.saveSilently(data, language);
        console.log('‚úÖ Donn√©es des espaces sauvegard√©es en base de donn√©es');
      } catch (dbError) {
        console.warn('‚ö†Ô∏è Sauvegarde en base de donn√©es √©chou√©e (localStorage conserv√©):', dbError);
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde:', error);
      throw error;
    }
  }

  // V√©rifier s'il y a des modifications sauvegard√©es
  static hasSavedContent(): boolean {
    try {
      const storedData = localStorage.getItem(STORAGE_KEY);
      return storedData !== null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des donn√©es sauvegard√©es:', error);
      return false;
    }
  }

  // Obtenir la date de derni√®re modification
  static getLastModified(): string | null {
    try {
      const storedData = localStorage.getItem(STORAGE_KEY);
      if (storedData) {
        const parsedData = JSON.parse(storedData);
        // Trouver la date de modification la plus r√©cente
        const dates = Object.values(parsedData)
          .map((space: any) => space.lastModified)
          .filter(Boolean);
        
        if (dates.length > 0) {
          return new Date(Math.max(...dates.map(d => new Date(d).getTime()))).toISOString();
        }
      }
      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la date de modification:', error);
      return null;
    }
  }

  // R√©initialiser le contenu
  static resetContent(): void {
    try {
      localStorage.removeItem(STORAGE_KEY);
      console.log('‚úÖ Contenu r√©initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©initialisation:', error);
    }
  }

  // Supprimer un espace sp√©cifique
  static async deleteSpace(spaceKey: string, language: 'fr' | 'en' = 'fr'): Promise<void> {
    try {
      console.log(`üóëÔ∏è Suppression de l'espace ${spaceKey}...`);
      
      // 1. Supprimer de la base de donn√©es
      await SpaceDatabaseService.deleteSpace(spaceKey, language);
      
      // 2. Supprimer du localStorage
      const storedData = localStorage.getItem(STORAGE_KEY);
      if (storedData) {
        const parsedData = JSON.parse(storedData);
        delete parsedData[spaceKey];
        localStorage.setItem(STORAGE_KEY, JSON.stringify(parsedData));
        console.log(`‚úÖ Espace ${spaceKey} supprim√© du localStorage`);
      }
      
      console.log(`‚úÖ Espace ${spaceKey} supprim√© avec succ√®s`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression de l'espace ${spaceKey}:`, error);
      throw error;
    }
  }

  // Fusionner avec les donn√©es par d√©faut
  static async mergeWithDefault(defaultData: Record<string, SpaceInfo>, language: 'fr' | 'en' = 'fr'): Promise<Record<string, SpaceInfo>> {
    try {
      const savedData = await this.getSavedContent(language);
      
      if (!savedData) {
        return defaultData;
      }

      // Fusionner les donn√©es sauvegard√©es avec les donn√©es par d√©faut
      const mergedData = { ...defaultData };
      
      Object.entries(savedData).forEach(([key, space]) => {
        mergedData[key] = {
          ...space,
          // S'assurer que toutes les propri√©t√©s requises sont pr√©sentes
          dailyPrice: space.dailyPrice || 0,
          monthlyPrice: space.monthlyPrice || 0,
          yearlyPrice: space.yearlyPrice || 0,
          hourlyPrice: space.hourlyPrice || 0,
          maxOccupants: space.maxOccupants || 1,
          features: space.features || [],
          isAvailable: space.isAvailable !== undefined ? space.isAvailable : true
        };
      });

      return mergedData;
    } catch (error) {
      console.error('‚ùå Erreur lors de la fusion des donn√©es:', error);
      return defaultData;
    }
  }

  // Synchroniser avec la base de donn√©es
  static async syncWithDatabase(language: 'fr' | 'en'): Promise<void> {
    try {
      console.log('üîÑ Synchronisation avec la base de donn√©es...');
      
      // V√©rifier la sant√© de la base de donn√©es
      const isHealthy = await SpaceDatabaseService.checkDatabaseHealth();
      if (!isHealthy) {
        console.warn('‚ö†Ô∏è Base de donn√©es non disponible, synchronisation ignor√©e');
        return;
      }

      // Charger les donn√©es locales
      const localData = localStorage.getItem(STORAGE_KEY);
      if (localData) {
        const parsedData = JSON.parse(localData);
        await SpaceDatabaseService.saveSilently(parsedData, language);
        console.log('‚úÖ Synchronisation avec la base de donn√©es termin√©e');
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error);
    }
  }

  // V√©rifier la coh√©rence des donn√©es
  static async validateData(language: 'fr' | 'en'): Promise<boolean> {
    try {
      const localData = localStorage.getItem(STORAGE_KEY);
      const dbData = await SpaceDatabaseService.loadFromDatabase(language);

      if (!localData && !dbData) {
        return true; // Aucune donn√©e = coh√©rent
      }

      if (localData && !dbData) {
        console.warn('‚ö†Ô∏è Donn√©es locales sans correspondance en base de donn√©es');
        return false;
      }

      if (!localData && dbData) {
        console.warn('‚ö†Ô∏è Donn√©es en base sans correspondance locale');
        return false;
      }

      // Comparer les donn√©es (simplifi√©)
      const localKeys = Object.keys(JSON.parse(localData));
      const dbKeys = Object.keys(dbData || {});
      
      const isConsistent = localKeys.length === dbKeys.length;
      
      if (!isConsistent) {
        console.warn('‚ö†Ô∏è Incoh√©rence d√©tect√©e entre donn√©es locales et base de donn√©es');
      }

      return isConsistent;
    } catch (error) {
      console.error('‚ùå Erreur lors de la validation des donn√©es:', error);
      return false;
    }
  }
}
